"""
This type stub file was generated by pyright.
"""

import ctypes
from OpenGL.raw.GL import _types
from OpenGL import acceleratesupport

"""Array data-type implementations (abstraction points for GL array types"""
_log = ...
ADT = ...
if acceleratesupport.ACCELERATE_AVAILABLE:
    ...
if ADT is None:
    class HandlerRegistry(dict):
        GENERIC_OUTPUT_PREFERENCES = ...
        def __init__(self, plugin_match) -> None:
            ...
        
        def __call__(self, value):
            """Lookup of handler for given value"""
            ...
        
        def handler_by_plugin_name(self, name):
            ...
        
        def get_output_handler(self):
            """Fast-path lookup for output handler object"""
            ...
        
        def register(self, handler, types=...):
            """Register this class as handler for given set of types"""
            ...
        
        def registerReturn(self, handler):
            """Register this handler as the default return-type handler"""
            ...
        
    
    
    GLOBAL_REGISTRY = ...
    class ArrayDatatype(object):
        """Mix-in for array datatype classes
        
        The ArrayDatatype marker essentially is used to mark a particular argument
        as having an "array" type, which means that it is eligible for handling 
        via the arrays sub-package and its registered handlers.
        """
        typeConstant = ...
        handler = ...
        getHandler = ...
        returnHandler = ...
        isAccelerated = ...
        @classmethod
        def getRegistry(cls):
            """Get our handler registry"""
            ...
        
        def from_param(cls, value, typeConstant=...):
            """Given a value in a known data-pointer type, convert to a ctypes pointer"""
            ...
        
        from_param = ...
        def dataPointer(cls, value):
            """Given a value in a known data-pointer type, return long for pointer"""
            ...
        
        dataPointer = ...
        def voidDataPointer(cls, value):
            """Given value in a known data-pointer type, return void_p for pointer"""
            ...
        
        voidDataPointer = ...
        def typedPointer(cls, value):
            """Return a pointer-to-base-type pointer for given value"""
            ...
        
        typedPointer = ...
        def asArray(cls, value, typeCode=...):
            """Given a value, convert to preferred array representation"""
            ...
        
        asArray = ...
        def arrayToGLType(cls, value):
            """Given a data-value, guess the OpenGL type of the corresponding pointer
            
            Note: this is not currently used in PyOpenGL and may be removed 
            eventually.
            """
            ...
        
        arrayToGLType = ...
        def arraySize(cls, value, typeCode=...):
            """Given a data-value, calculate dimensions for the array (number-of-units)"""
            ...
        
        arraySize = ...
        def unitSize(cls, value, typeCode=...):
            """Determine unit size of an array (if possible)
            
            Uses our local type if defined, otherwise asks the handler to guess...
            """
            ...
        
        unitSize = ...
        def zeros(cls, dims, typeCode=...):
            """Allocate a return array of the given dimensions filled with zeros"""
            ...
        
        zeros = ...
        def dimensions(cls, value):
            """Given a data-value, get the dimensions (assumes full structure info)"""
            ...
        
        dimensions = ...
        def arrayByteCount(cls, value):
            """Given a data-value, try to determine number of bytes it's final form occupies
            
            For most data-types this is arraySize() * atomic-unit-size
            """
            ...
        
        arrayByteCount = ...
    
    
    class GLclampdArray(ArrayDatatype, ctypes.POINTER(_types.GLclampd)):
        """Array datatype for GLclampd types"""
        baseType = _types.GLclampd
        typeConstant = ...
    
    
    class GLclampfArray(ArrayDatatype, ctypes.POINTER(_types.GLclampf)):
        """Array datatype for GLclampf types"""
        baseType = _types.GLclampf
        typeConstant = ...
    
    
    class GLfloatArray(ArrayDatatype, ctypes.POINTER(_types.GLfloat)):
        """Array datatype for GLfloat types"""
        baseType = _types.GLfloat
        typeConstant = ...
    
    
    class GLdoubleArray(ArrayDatatype, ctypes.POINTER(_types.GLdouble)):
        """Array datatype for GLdouble types"""
        baseType = _types.GLdouble
        typeConstant = ...
    
    
    class GLbyteArray(ArrayDatatype, ctypes.POINTER(_types.GLbyte)):
        """Array datatype for GLbyte types"""
        baseType = _types.GLbyte
        typeConstant = ...
    
    
    class GLcharArray(ArrayDatatype, ctypes.c_char_p):
        """Array datatype for ARB extension pointers-to-arrays"""
        baseType = _types.GLchar
        typeConstant = ...
    
    
    GLcharARBArray = ...
    class GLshortArray(ArrayDatatype, ctypes.POINTER(_types.GLshort)):
        """Array datatype for GLshort types"""
        baseType = _types.GLshort
        typeConstant = ...
    
    
    class GLintArray(ArrayDatatype, ctypes.POINTER(_types.GLint)):
        """Array datatype for GLint types"""
        baseType = _types.GLint
        typeConstant = ...
    
    
    class GLubyteArray(ArrayDatatype, ctypes.POINTER(_types.GLubyte)):
        """Array datatype for GLubyte types"""
        baseType = _types.GLubyte
        typeConstant = ...
    
    
    GLbooleanArray = ...
    class GLushortArray(ArrayDatatype, ctypes.POINTER(_types.GLushort)):
        """Array datatype for GLushort types"""
        baseType = _types.GLushort
        typeConstant = ...
    
    
    class GLuintArray(ArrayDatatype, ctypes.POINTER(_types.GLuint)):
        """Array datatype for GLuint types"""
        baseType = _types.GLuint
        typeConstant = ...
    
    
    class GLint64Array(ArrayDatatype, ctypes.POINTER(_types.GLint64)):
        """Array datatype for GLuint types"""
        baseType = _types.GLint64
        typeConstant = ...
    
    
    class GLuint64Array(ArrayDatatype, ctypes.POINTER(_types.GLuint64)):
        """Array datatype for GLuint types"""
        baseType = _types.GLuint64
        typeConstant = ...
    
    
    class GLenumArray(ArrayDatatype, ctypes.POINTER(_types.GLenum)):
        """Array datatype for GLenum types"""
        baseType = _types.GLenum
        typeConstant = ...
    
    
    class GLsizeiArray(ArrayDatatype, ctypes.POINTER(_types.GLsizei)):
        """Array datatype for GLsizei types"""
        baseType = _types.GLsizei
        typeConstant = ...
    
    
    class GLvoidpArray(ArrayDatatype, ctypes.POINTER(_types.GLvoid)):
        """Array datatype for GLenum types"""
        baseType = _types.GLvoidp
        typeConstant = ...
    
    
    class GLfixedArray(ArrayDatatype, ctypes.POINTER(_types.GLfixed)):
        baseType = _types.GLfixed
        typeConstant = ...
    
    
else:
    ArrayDatatype = ...
    GLclampdArray = ...
    GLclampfArray = ...
    GLdoubleArray = ...
    GLfloatArray = ...
    GLbyteArray = ...
    GLcharArray = ...
    GLshortArray = ...
    GLintArray = ...
    GLubyteArray = ...
    GLushortArray = ...
    GLuintArray = ...
    GLint64Array = ...
    GLuint64Array = ...
    GLenumArray = ...
    GLsizeiArray = ...
    GLvoidpArray = ...
    GLfixedArray = ...
EGLAttribArray = GLintArray
GL_CONSTANT_TO_ARRAY_TYPE = ...
