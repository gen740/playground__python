"""
This type stub file was generated by pyright.
"""

"""
Collection of physical constants and conversion factors.

Most constants are in SI units, so you can do
print '10 mile per minute is', 10*mile/minute, 'm/s or', 10*mile/(minute*knot), 'knots'

The list is not meant to be comprehensive, but just convenient for everyday use.
"""
pi = ...
golden = ...
yotta = ...
zetta = ...
exa = ...
peta = ...
tera = ...
giga = ...
mega = ...
kilo = ...
hecto = ...
deka = ...
deci = ...
centi = ...
milli = ...
micro = ...
nano = ...
pico = ...
femto = ...
atto = ...
zepto = ...
kibi = 2 ** 10
mebi = 2 ** 20
gibi = 2 ** 30
tebi = 2 ** 40
pebi = 2 ** 50
exbi = 2 ** 60
zebi = 2 ** 70
yobi = 2 ** 80
c = ...
mu_0 = ...
epsilon_0 = ...
h = ...
hbar = ...
G = ...
g = ...
e = ...
R = ...
alpha = ...
N_A = ...
k = ...
sigma = ...
Wien = ...
Rydberg = ...
gram = ...
metric_ton = ...
grain = ...
lb = ...
blob = ...
slug = ...
oz = ...
stone = ...
long_ton = ...
short_ton = ...
troy_ounce = ...
troy_pound = ...
carat = ...
m_e = ...
m_p = ...
m_n = ...
m_u = ...
degree = ...
arcmin = ...
arcsec = ...
minute = ...
hour = ...
day = ...
week = ...
year = ...
Julian_year = ...
inch = ...
foot = ...
yard = ...
mile = ...
mil = ...
pt = ...
survey_foot = ...
survey_mile = ...
nautical_mile = ...
fermi = ...
angstrom = ...
micron = ...
au = ...
light_year = ...
parsec = ...
atm = ...
bar = ...
torr = ...
psi = ...
hectare = ...
acre = ...
litre = ...
gallon = ...
fluid_ounce = ...
bbl = ...
gallon_imp = ...
fluid_ounce_imp = ...
kmh = ...
mph = ...
mach = ...
knot = ...
zero_Celsius = ...
degree_Fahrenheit = ...
eV = ...
calorie = ...
calorie_IT = ...
erg = ...
Btu_th = ...
Btu = ...
ton_TNT = ...
hp = ...
dyn = ...
lbf = ...
kgf = ...
def convert_temperature(val, old_scale, new_scale):
    """
    Convert from a temperature scale to another one among Celsius, Kelvin,
    Fahrenheit, and Rankine scales.

    Parameters
    ----------
    val : array_like
        Value(s) of the temperature(s) to be converted expressed in the
        original scale.

    old_scale: str
        Specifies as a string the original scale from which the temperature
        value(s) will be converted. Supported scales are Celsius ('Celsius',
        'celsius', 'C' or 'c'), Kelvin ('Kelvin', 'kelvin', 'K', 'k'),
        Fahrenheit ('Fahrenheit', 'fahrenheit', 'F' or 'f'), and Rankine
        ('Rankine', 'rankine', 'R', 'r').

    new_scale: str
        Specifies as a string the new scale to which the temperature
        value(s) will be converted. Supported scales are Celsius ('Celsius',
        'celsius', 'C' or 'c'), Kelvin ('Kelvin', 'kelvin', 'K', 'k'),
        Fahrenheit ('Fahrenheit', 'fahrenheit', 'F' or 'f'), and Rankine
        ('Rankine', 'rankine', 'R', 'r').

    Returns
    -------
    res : float or array of floats
        Value(s) of the converted temperature(s) expressed in the new scale.

    Notes
    -----
    .. versionadded:: 0.18.0

    Examples
    --------
    >>> from scipy.constants import convert_temperature
    >>> convert_temperature(np.array([-40, 40]), 'Celsius', 'Kelvin')
    array([ 233.15,  313.15])

    """
    ...

def lambda2nu(lambda_):
    """
    Convert wavelength to optical frequency

    Parameters
    ----------
    lambda_ : array_like
        Wavelength(s) to be converted.

    Returns
    -------
    nu : float or array of floats
        Equivalent optical frequency.

    Notes
    -----
    Computes ``nu = c / lambda`` where c = 299792458.0, i.e., the
    (vacuum) speed of light in meters/second.

    Examples
    --------
    >>> from scipy.constants import lambda2nu, speed_of_light
    >>> lambda2nu(np.array((1, speed_of_light)))
    array([  2.99792458e+08,   1.00000000e+00])

    """
    ...

def nu2lambda(nu):
    """
    Convert optical frequency to wavelength.

    Parameters
    ----------
    nu : array_like
        Optical frequency to be converted.

    Returns
    -------
    lambda : float or array of floats
        Equivalent wavelength(s).

    Notes
    -----
    Computes ``lambda = c / nu`` where c = 299792458.0, i.e., the
    (vacuum) speed of light in meters/second.

    Examples
    --------
    >>> from scipy.constants import nu2lambda, speed_of_light
    >>> nu2lambda(np.array((1, speed_of_light)))
    array([  2.99792458e+08,   1.00000000e+00])

    """
    ...

