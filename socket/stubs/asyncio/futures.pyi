from . import base_futures
from _typeshed import Incomplete
from collections.abc import Generator

isfuture = base_futures.isfuture

class Future:
    def __init__(self, *, loop: Incomplete | None = ...) -> None: ...
    def __del__(self) -> None: ...
    __class_getitem__: Incomplete
    def get_loop(self): ...
    def cancel(self, msg: Incomplete | None = ...): ...
    def cancelled(self): ...
    def done(self): ...
    def result(self): ...
    def exception(self): ...
    def add_done_callback(self, fn, *, context: Incomplete | None = ...) -> None: ...
    def remove_done_callback(self, fn): ...
    def set_result(self, result) -> None: ...
    def set_exception(self, exception) -> None: ...
    def __await__(self) -> Generator[Incomplete, None, Incomplete]: ...
    __iter__: Incomplete

def wrap_future(future, *, loop: Incomplete | None = ...): ...
