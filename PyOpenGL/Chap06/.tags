!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Fractal	fractal.py	/^class Fractal(object):$/;"	c
Fractal	koch.py	/^from fractal import Fractal$/;"	i
Fractal	sierpinski.py	/^from fractal import Fractal$/;"	i
Koch	koch.py	/^class Koch(Fractal):$/;"	c
MyCanvas	fractal.py	/^from myCanvas import MyCanvas$/;"	i
MyCanvas	koch.py	/^from myCanvas import MyCanvas$/;"	i
MyCanvas	myCanvas.py	/^class MyCanvas(object):                  # MyCanvasクラスの定義$/;"	c
MyCanvas	sierpinski.py	/^from myCanvas import MyCanvas$/;"	i
Sierpinski	sierpinski.py	/^class Sierpinski(Fractal):$/;"	c
__init__	fractal.py	/^    def __init__(self, canvas, base, mats, vecs):$/;"	m	class:Fractal
__init__	koch.py	/^    def __init__(self, canvas):$/;"	m	class:Koch
__init__	myCanvas.py	/^    def __init__(self, width=600, height=600, xo=300, yo=300, r=2.0):$/;"	m	class:MyCanvas
__init__	sierpinski.py	/^    def __init__(self, canvas):$/;"	m	class:Sierpinski
bind	myCanvas.py	/^    def bind(self, event, func):           # コールバック関数の登録メソッド$/;"	m	class:MyCanvas
clear	myCanvas.py	/^    def clear(self):                       # クリアメソッド$/;"	m	class:MyCanvas
drawCircle	myCanvas.py	/^    def drawCircle(self, c, r, fill='', outline='black'):  # 円の描画メソッド$/;"	m	class:MyCanvas
drawFractal	fractal.py	/^    def drawFractal(self, l=-1, mat=np.array(((1, 0), (0, 1))),$/;"	m	class:Fractal
drawMarker	myCanvas.py	/^    def drawMarker(self, p, fill='black', outline=''):  # markerの描画メソッド$/;"	m	class:MyCanvas
drawObject	fractal.py	/^    def drawObject(self, pnts):$/;"	m	class:Fractal
drawObject	koch.py	/^    def drawObject(self, pnts):$/;"	m	class:Koch
drawObject	sierpinski.py	/^    def drawObject(self, pnts):$/;"	m	class:Sierpinski
drawPolygon	myCanvas.py	/^    def drawPolygon(self, ps, fill='gray90', outline='black'):  # 多角形の描画メソッド$/;"	m	class:MyCanvas
drawPolyline	myCanvas.py	/^    def drawPolyline(self, ps, color='black'):  # 折れ線の描画メソッド$/;"	m	class:MyCanvas
import	koch.py	/^import math  # math モジュールの import$/;"	i
import	myCanvas.py	/^import math                              # mathモジュールのimport$/;"	i
import	myCanvas.py	/^import numpy as np                       # numpyモジュールのimport (npで)$/;"	i
import	sierpinski.py	/^import math  # math モジュールの import$/;"	i
inside	myCanvas.py	/^    def inside(self, p):                   # 描画領域内かの判定メソッド$/;"	m	class:MyCanvas
main	koch.py	/^def main():$/;"	f
main	sierpinski.py	/^def main():$/;"	f
main	vectorMatrix.py	/^def main():$/;"	f
mainloop	myCanvas.py	/^    def mainloop(self):                    # 実行ループの開始メソッド$/;"	m	class:MyCanvas
math	koch.py	/^import math  # math モジュールの import$/;"	i
math	myCanvas.py	/^import math                              # mathモジュールのimport$/;"	i
math	sierpinski.py	/^import math  # math モジュールの import$/;"	i
math	vectorMatrix.py	/^import math$/;"	i
norm	vectorMatrix.py	/^def norm(v):$/;"	f
np	fractal.py	/^import numpy as np$/;"	i
np	koch.py	/^import numpy as np$/;"	i
np	myCanvas.py	/^import numpy as np                       # numpyモジュールのimport (npで)$/;"	i
np	sierpinski.py	/^import numpy as np$/;"	i
np	vectorMatrix.py	/^import numpy as np$/;"	i
numpy	myCanvas.py	/^import numpy as np                       # numpyモジュールのimport (npで)$/;"	i
point	myCanvas.py	/^    def point(self, x, y):                 # 点データの作成メソッド$/;"	m	class:MyCanvas
rotMatrix	koch.py	/^from vectorMatrix import rotMatrix, scaleMatrix$/;"	i
rotMatrix	vectorMatrix.py	/^def rotMatrix(t):$/;"	f
scaleMatrix	koch.py	/^from vectorMatrix import rotMatrix, scaleMatrix$/;"	i
scaleMatrix	sierpinski.py	/^from vectorMatrix import scaleMatrix$/;"	i
scaleMatrix	vectorMatrix.py	/^def scaleMatrix(s):$/;"	f
setOrigin	myCanvas.py	/^    def setOrigin(self, x, y):             # 描画原点の指定メソッド$/;"	m	class:MyCanvas
setRange	myCanvas.py	/^    def setRange(self, r):                 # 描画領域の範囲指定メソッド$/;"	m	class:MyCanvas
sys	fractal.py	/^import sys$/;"	i
x	myCanvas.py	/^    def x(self, p):                        # 点のスクリーン上での x座標計算メソッド$/;"	m	class:MyCanvas
y	myCanvas.py	/^    def y(self, p):                        # 点のスクリーン上での y座標計算メソッド$/;"	m	class:MyCanvas
