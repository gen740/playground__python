from collections.abc import Generator
from typing import Any
from urwid import util as util
from urwid.canvas import Canvas as Canvas
from urwid.compat import B as B, PYTHON3 as PYTHON3, bytes as bytes, chr2 as chr2, ord2 as ord2, xrange as xrange
from urwid.display_common import AttrSpec as AttrSpec, RealTerminal as RealTerminal
from urwid.escape import ALT_DEC_SPECIAL_CHARS as ALT_DEC_SPECIAL_CHARS, DEC_SPECIAL_CHARS as DEC_SPECIAL_CHARS
from urwid.widget import BOX as BOX, Widget as Widget

EOF: Any
ESC: Any
KEY_TRANSLATIONS: Any
KEY_TRANSLATIONS_DECCKM: Any
CSI_COMMANDS: Any
CHARSET_DEFAULT: int
CHARSET_UTF8: int

class TermModes:
    def __init__(self) -> None: ...
    display_ctrl: bool
    insert: bool
    lfnl: bool
    keys_decckm: bool
    reverse_video: bool
    constrain_scrolling: bool
    autowrap: bool
    visible_cursor: bool
    main_charset: Any
    def reset(self) -> None: ...

class TermCharset:
    MAPPING: Any
    def __init__(self) -> None: ...
    def define(self, g, charset) -> None: ...
    active: Any
    current: Any
    def activate(self, g) -> None: ...
    def set_sgr_ibmpc(self) -> None: ...
    def reset_sgr_ibmpc(self) -> None: ...
    def apply_mapping(self, char): ...

class TermScroller(list):
    SCROLLBACK_LINES: int
    def trunc(self) -> None: ...
    def append(self, obj) -> None: ...
    def insert(self, idx, obj) -> None: ...
    def extend(self, seq) -> None: ...

class TermCanvas(Canvas):
    cacheable: bool
    widget: Any
    modes: Any
    has_focus: bool
    scrollback_buffer: Any
    scrolling_up: int
    utf8_eat_bytes: Any
    utf8_buffer: Any
    def __init__(self, width, height, widget) -> None: ...
    term_cursor: Any
    cursor: Any
    def set_term_cursor(self, x: Any | None = ..., y: Any | None = ...) -> None: ...
    scrollregion_start: int
    scrollregion_end: Any
    def reset_scroll(self) -> None: ...
    def scroll_buffer(self, up: bool = ..., reset: bool = ..., lines: Any | None = ...) -> None: ...
    escbuf: Any
    within_escape: bool
    parsestate: int
    attrspec: Any
    charset: Any
    saved_cursor: Any
    saved_attrs: Any
    is_rotten_cursor: bool
    def reset(self) -> None: ...
    tabstops: Any
    def init_tabstops(self, extend: bool = ...) -> None: ...
    def set_tabstop(self, x: Any | None = ..., remove: bool = ..., clear: bool = ...) -> None: ...
    def is_tabstop(self, x: Any | None = ...): ...
    def empty_line(self, char=...): ...
    def empty_char(self, char=...): ...
    def addstr(self, data) -> None: ...
    width: Any
    height: Any
    def resize(self, width, height) -> None: ...
    def set_g01(self, char, mod) -> None: ...
    def parse_csi(self, char) -> None: ...
    def parse_noncsi(self, char, mod: Any | None = ...) -> None: ...
    def parse_osc(self, buf) -> None: ...
    def parse_escape(self, char) -> None: ...
    def leave_escape(self) -> None: ...
    def get_utf8_len(self, bytenum): ...
    def addbyte(self, byte) -> None: ...
    def process_char(self, char) -> None: ...
    def set_char(self, char, x: Any | None = ..., y: Any | None = ...) -> None: ...
    def constrain_coords(self, x, y, ignore_scrolling: bool = ...): ...
    def linefeed(self, reverse: bool = ...) -> None: ...
    def carriage_return(self) -> None: ...
    def newline(self) -> None: ...
    def move_cursor(self, x, y, relative_x: bool = ..., relative_y: bool = ..., relative: bool = ...) -> None: ...
    def push_char(self, char, x, y) -> None: ...
    def push_cursor(self, char: Any | None = ...) -> None: ...
    def save_cursor(self, with_attrs: bool = ...) -> None: ...
    def restore_cursor(self, with_attrs: bool = ...) -> None: ...
    def tab(self, tabstop: int = ...) -> None: ...
    def scroll(self, reverse: bool = ...) -> None: ...
    def decaln(self) -> None: ...
    def blank_line(self, row) -> None: ...
    def insert_chars(self, position: Any | None = ..., chars: int = ..., char: Any | None = ...) -> None: ...
    def remove_chars(self, position: Any | None = ..., chars: int = ...) -> None: ...
    def insert_lines(self, row: Any | None = ..., lines: int = ...) -> None: ...
    def remove_lines(self, row: Any | None = ..., lines: int = ...) -> None: ...
    def erase(self, start, end) -> None: ...
    def sgi_to_attrspec(self, attrs, fg, bg, attributes): ...
    def csi_set_attr(self, attrs) -> None: ...
    def reverse_attrspec(self, attrspec, undo: bool = ...): ...
    def reverse_video(self, undo: bool = ...) -> None: ...
    def set_mode(self, mode, flag, qmark, reset) -> None: ...
    def csi_set_modes(self, modes, qmark, reset: bool = ...) -> None: ...
    def csi_set_scroll(self, top: int = ..., bottom: int = ...) -> None: ...
    def csi_clear_tabstop(self, mode: int = ...) -> None: ...
    def csi_get_device_attributes(self, qmark) -> None: ...
    def csi_status_report(self, mode) -> None: ...
    def csi_erase_line(self, mode) -> None: ...
    def csi_erase_display(self, mode) -> None: ...
    def csi_set_keyboard_leds(self, mode: int = ...) -> None: ...
    term: Any
    def clear(self, cursor: Any | None = ...) -> None: ...
    def cols(self): ...
    def rows(self): ...
    def content(self, trim_left: int = ..., trim_right: int = ..., cols: Any | None = ..., rows: Any | None = ..., attr_map: Any | None = ...) -> Generator[Any, None, None]: ...
    def content_delta(self, other): ...

class Terminal(Widget):
    signals: Any
    escape_sequence: Any
    env: Any
    command: Any
    encoding: Any
    keygrab: bool
    last_key: Any
    response_buffer: Any
    term_modes: Any
    main_loop: Any
    master: Any
    pid: Any
    width: Any
    height: Any
    term: Any
    has_focus: bool
    terminated: bool
    def __init__(self, command, env: Any | None = ..., main_loop: Any | None = ..., escape_sequence: Any | None = ..., encoding: str = ...) -> None: ...
    def get_cursor_coords(self, size): ...
    def spawn(self) -> None: ...
    def terminate(self) -> None: ...
    def beep(self) -> None: ...
    def leds(self, which) -> None: ...
    def respond(self, string) -> None: ...
    def flush_responses(self) -> None: ...
    def set_termsize(self, width, height) -> None: ...
    def touch_term(self, width, height) -> None: ...
    def set_title(self, title) -> None: ...
    old_tios: Any
    def change_focus(self, has_focus) -> None: ...
    def render(self, size, focus: bool = ...): ...
    def add_watch(self) -> None: ...
    def remove_watch(self) -> None: ...
    def wait_and_feed(self, timeout: float = ...) -> None: ...
    def feed(self) -> None: ...
    def keypress(self, size, key): ...
