from . import futures
from _asyncio import _enter_task as _enter_task, _leave_task as _leave_task, _register_task as _register_task, _unregister_task as _unregister_task
from _typeshed import Incomplete
from collections.abc import Generator

def current_task(loop: Incomplete | None = ...): ...
def all_tasks(loop: Incomplete | None = ...): ...

class Task(futures._PyFuture):
    def __init__(self, coro, *, loop: Incomplete | None = ..., name: Incomplete | None = ...) -> None: ...
    def __del__(self) -> None: ...
    __class_getitem__: Incomplete
    def get_coro(self): ...
    def get_name(self): ...
    def set_name(self, value) -> None: ...
    def set_result(self, result) -> None: ...
    def set_exception(self, exception) -> None: ...
    def get_stack(self, *, limit: Incomplete | None = ...): ...
    def print_stack(self, *, limit: Incomplete | None = ..., file: Incomplete | None = ...): ...
    def cancel(self, msg: Incomplete | None = ...): ...

def create_task(coro, *, name: Incomplete | None = ...): ...

FIRST_COMPLETED: Incomplete
FIRST_EXCEPTION: Incomplete
ALL_COMPLETED: Incomplete

async def wait(fs, *, loop: Incomplete | None = ..., timeout: Incomplete | None = ..., return_when=...): ...
async def wait_for(fut, timeout, *, loop: Incomplete | None = ...): ...
def as_completed(fs, *, loop: Incomplete | None = ..., timeout: Incomplete | None = ...) -> Generator[Incomplete, None, Incomplete]: ...
async def sleep(delay, result: Incomplete | None = ..., *, loop: Incomplete | None = ...): ...
def ensure_future(coro_or_future, *, loop: Incomplete | None = ...): ...

class _GatheringFuture(futures.Future):
    def __init__(self, children, *, loop: Incomplete | None = ...) -> None: ...
    def cancel(self, msg: Incomplete | None = ...): ...

def gather(*coros_or_futures, loop: Incomplete | None = ..., return_exceptions: bool = ...): ...
def shield(arg, *, loop: Incomplete | None = ...): ...
def run_coroutine_threadsafe(coro, loop): ...
