"""
This type stub file was generated by pyright.
"""

import sys
from ast import AST
from typing import Any, List, Mapping, Optional, Protocol, Sequence, Tuple, Union, overload
from numpy import generic, ndarray

"""
This type stub file was generated by pyright.
"""
if sys.version_info >= (3, 8):
    ...
else:
    ...
_T_contra = ...
_FuncType = ...
class _SupportsWrite(Protocol[_T_contra]):
    def write(self, __s: _T_contra) -> Any:
        ...
    


__all__: List[str]
class _Deprecate:
    old_name: Optional[str]
    new_name: Optional[str]
    message: Optional[str]
    def __init__(self, old_name: Optional[str] = ..., new_name: Optional[str] = ..., message: Optional[str] = ...) -> None:
        ...
    
    def __call__(self, func: _FuncType) -> _FuncType:
        ...
    


def get_include() -> str:
    ...

@overload
def deprecate(*, old_name: Optional[str] = ..., new_name: Optional[str] = ..., message: Optional[str] = ...) -> _Deprecate:
    ...

@overload
def deprecate(__func: _FuncType, old_name: Optional[str] = ..., new_name: Optional[str] = ..., message: Optional[str] = ...) -> _FuncType:
    ...

def deprecate_with_doc(msg: Optional[str]) -> _Deprecate:
    ...

def byte_bounds(a: Union[generic, ndarray[Any, Any]]) -> Tuple[int, int]:
    ...

def who(vardict: Optional[Mapping[str, ndarray[Any, Any]]] = ...) -> None:
    ...

def info(object: object = ..., maxwidth: int = ..., output: Optional[_SupportsWrite[str]] = ..., toplevel: str = ...) -> None:
    ...

def source(object: object, output: Optional[_SupportsWrite[str]] = ...) -> None:
    ...

def lookfor(what: str, module: Union[None, str, Sequence[str]] = ..., import_modules: bool = ..., regenerate: bool = ..., output: Optional[_SupportsWrite[str]] = ...) -> None:
    ...

def safe_eval(source: Union[str, AST]) -> Any:
    ...

