"""
This type stub file was generated by pyright.
"""

from django.utils.deprecation import MiddlewareMixin

"""
Cross Site Request Forgery Middleware.

This module provides a middleware that implements protection
against request forgeries from other sites.
"""
logger = ...
REASON_NO_REFERER = ...
REASON_BAD_REFERER = ...
REASON_NO_CSRF_COOKIE = ...
REASON_BAD_TOKEN = ...
REASON_MALFORMED_REFERER = ...
REASON_INSECURE_REFERER = ...
CSRF_SECRET_LENGTH = ...
CSRF_TOKEN_LENGTH = ...
CSRF_ALLOWED_CHARS = ...
CSRF_SESSION_KEY = ...
def get_token(request):
    """
    Return the CSRF token required for a POST form. The token is an
    alphanumeric value. A new token is created if one is not already set.

    A side effect of calling this function is to make the csrf_protect
    decorator and the CsrfViewMiddleware add a CSRF cookie and a 'Vary: Cookie'
    header to the outgoing response.  For this reason, you may need to use this
    function lazily, as is done by the csrf context processor.
    """
    ...

def rotate_token(request):
    """
    Change the CSRF token in use for a request - should be done on login
    for security purposes.
    """
    ...

class CsrfViewMiddleware(MiddlewareMixin):
    """
    Require a present and correct csrfmiddlewaretoken for POST requests that
    have a CSRF cookie, and set an outgoing CSRF cookie.

    This middleware should be used in conjunction with the {% csrf_token %}
    template tag.
    """
    def process_request(self, request):
        ...
    
    def process_view(self, request, callback, callback_args, callback_kwargs):
        ...
    
    def process_response(self, request, response):
        ...
    


