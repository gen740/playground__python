from typing import Any
from urwid.canvas import CompositeCanvas as CompositeCanvas
from urwid.command_map import ACTIVATE as ACTIVATE
from urwid.container import Columns as Columns, Overlay as Overlay
from urwid.decoration import WidgetDecoration as WidgetDecoration
from urwid.signals import connect_signal as connect_signal, disconnect_signal as disconnect_signal
from urwid.split_repr import python3_repr as python3_repr
from urwid.text_layout import calc_coords as calc_coords
from urwid.util import is_mouse_press as is_mouse_press
from urwid.widget import BOX as BOX, FLOW as FLOW, Text as Text, WidgetWrap as WidgetWrap, delegate_to_widget_mixin as delegate_to_widget_mixin

class SelectableIcon(Text):
    ignore_focus: bool
    def __init__(self, text, cursor_position: int = ...) -> None: ...
    def render(self, size, focus: bool = ...): ...
    def get_cursor_coords(self, size): ...
    def keypress(self, size, key): ...

class CheckBoxError(Exception): ...

class CheckBox(WidgetWrap):
    def sizing(self): ...
    states: Any
    reserve_columns: int
    signals: Any
    has_mixed: Any
    def __init__(self, label, state: bool = ..., has_mixed: bool = ..., on_state_change: Any | None = ..., user_data: Any | None = ..., checked_symbol: Any | None = ...) -> None: ...
    def set_label(self, label) -> None: ...
    def get_label(self): ...
    label: Any
    def set_state(self, state, do_callback: bool = ...) -> None: ...
    def get_state(self): ...
    state: Any
    def keypress(self, size, key): ...
    def toggle_state(self) -> None: ...
    def mouse_event(self, size, event, button, x, y, focus): ...

class RadioButton(CheckBox):
    states: Any
    reserve_columns: int
    group: Any
    def __init__(self, group, label, state: str = ..., on_state_change: Any | None = ..., user_data: Any | None = ...) -> None: ...
    def set_state(self, state, do_callback: bool = ...) -> None: ...
    def toggle_state(self) -> None: ...

class Button(WidgetWrap):
    def sizing(self): ...
    button_left: Any
    button_right: Any
    signals: Any
    def __init__(self, label, on_press: Any | None = ..., user_data: Any | None = ...) -> None: ...
    def set_label(self, label) -> None: ...
    def get_label(self): ...
    label: Any
    def keypress(self, size, key): ...
    def mouse_event(self, size, event, button, x, y, focus): ...

class PopUpLauncher(WidgetDecoration):
    def __init__(self, original_widget) -> None: ...
    def create_pop_up(self) -> None: ...
    def get_pop_up_parameters(self) -> None: ...
    def open_pop_up(self) -> None: ...
    def close_pop_up(self) -> None: ...
    def render(self, size, focus: bool = ...): ...

class PopUpTarget(WidgetDecoration):
    def __init__(self, original_widget) -> None: ...
    def render(self, size, focus: bool = ...): ...
    def get_cursor_coords(self, size): ...
    def get_pref_col(self, size): ...
    def keypress(self, size, key): ...
    def move_cursor_to_coords(self, size, x, y): ...
    def mouse_event(self, size, event, button, x, y, focus): ...
    def pack(self, size: Any | None = ..., focus: bool = ...): ...
