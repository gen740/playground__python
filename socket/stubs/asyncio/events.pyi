import threading
from _asyncio import _get_running_loop as _get_running_loop, _set_running_loop as _set_running_loop, get_event_loop as get_event_loop, get_running_loop as get_running_loop
from _typeshed import Incomplete

class Handle:
    def __init__(self, callback, args, loop, context: Incomplete | None = ...) -> None: ...
    def cancel(self) -> None: ...
    def cancelled(self): ...

class TimerHandle(Handle):
    def __init__(self, when, callback, args, loop, context: Incomplete | None = ...) -> None: ...
    def __hash__(self): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __eq__(self, other): ...
    def cancel(self) -> None: ...
    def when(self): ...

class AbstractServer:
    def close(self) -> None: ...
    def get_loop(self) -> None: ...
    def is_serving(self) -> None: ...
    async def start_serving(self) -> None: ...
    async def serve_forever(self) -> None: ...
    async def wait_closed(self) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, *exc) -> None: ...

class AbstractEventLoop:
    def run_forever(self) -> None: ...
    def run_until_complete(self, future) -> None: ...
    def stop(self) -> None: ...
    def is_running(self) -> None: ...
    def is_closed(self) -> None: ...
    def close(self) -> None: ...
    async def shutdown_asyncgens(self) -> None: ...
    async def shutdown_default_executor(self) -> None: ...
    def call_soon(self, callback, *args, context: Incomplete | None = ...): ...
    def call_later(self, delay, callback, *args, context: Incomplete | None = ...) -> None: ...
    def call_at(self, when, callback, *args, context: Incomplete | None = ...) -> None: ...
    def time(self) -> None: ...
    def create_future(self) -> None: ...
    def create_task(self, coro, *, name: Incomplete | None = ...) -> None: ...
    def call_soon_threadsafe(self, callback, *args, context: Incomplete | None = ...) -> None: ...
    def run_in_executor(self, executor, func, *args) -> None: ...
    def set_default_executor(self, executor) -> None: ...
    async def getaddrinfo(self, host, port, *, family: int = ..., type: int = ..., proto: int = ..., flags: int = ...) -> None: ...
    async def getnameinfo(self, sockaddr, flags: int = ...) -> None: ...
    async def create_connection(self, protocol_factory, host: Incomplete | None = ..., port: Incomplete | None = ..., *, ssl: Incomplete | None = ..., family: int = ..., proto: int = ..., flags: int = ..., sock: Incomplete | None = ..., local_addr: Incomplete | None = ..., server_hostname: Incomplete | None = ..., ssl_handshake_timeout: Incomplete | None = ..., happy_eyeballs_delay: Incomplete | None = ..., interleave: Incomplete | None = ...) -> None: ...
    async def create_server(self, protocol_factory, host: Incomplete | None = ..., port: Incomplete | None = ..., *, family=..., flags=..., sock: Incomplete | None = ..., backlog: int = ..., ssl: Incomplete | None = ..., reuse_address: Incomplete | None = ..., reuse_port: Incomplete | None = ..., ssl_handshake_timeout: Incomplete | None = ..., start_serving: bool = ...) -> None: ...
    async def sendfile(self, transport, file, offset: int = ..., count: Incomplete | None = ..., *, fallback: bool = ...) -> None: ...
    async def start_tls(self, transport, protocol, sslcontext, *, server_side: bool = ..., server_hostname: Incomplete | None = ..., ssl_handshake_timeout: Incomplete | None = ...) -> None: ...
    async def create_unix_connection(self, protocol_factory, path: Incomplete | None = ..., *, ssl: Incomplete | None = ..., sock: Incomplete | None = ..., server_hostname: Incomplete | None = ..., ssl_handshake_timeout: Incomplete | None = ...) -> None: ...
    async def create_unix_server(self, protocol_factory, path: Incomplete | None = ..., *, sock: Incomplete | None = ..., backlog: int = ..., ssl: Incomplete | None = ..., ssl_handshake_timeout: Incomplete | None = ..., start_serving: bool = ...) -> None: ...
    async def create_datagram_endpoint(self, protocol_factory, local_addr: Incomplete | None = ..., remote_addr: Incomplete | None = ..., *, family: int = ..., proto: int = ..., flags: int = ..., reuse_address: Incomplete | None = ..., reuse_port: Incomplete | None = ..., allow_broadcast: Incomplete | None = ..., sock: Incomplete | None = ...) -> None: ...
    async def connect_read_pipe(self, protocol_factory, pipe) -> None: ...
    async def connect_write_pipe(self, protocol_factory, pipe) -> None: ...
    async def subprocess_shell(self, protocol_factory, cmd, *, stdin=..., stdout=..., stderr=..., **kwargs) -> None: ...
    async def subprocess_exec(self, protocol_factory, *args, stdin=..., stdout=..., stderr=..., **kwargs) -> None: ...
    def add_reader(self, fd, callback, *args) -> None: ...
    def remove_reader(self, fd) -> None: ...
    def add_writer(self, fd, callback, *args) -> None: ...
    def remove_writer(self, fd) -> None: ...
    async def sock_recv(self, sock, nbytes) -> None: ...
    async def sock_recv_into(self, sock, buf) -> None: ...
    async def sock_sendall(self, sock, data) -> None: ...
    async def sock_connect(self, sock, address) -> None: ...
    async def sock_accept(self, sock) -> None: ...
    async def sock_sendfile(self, sock, file, offset: int = ..., count: Incomplete | None = ..., *, fallback: Incomplete | None = ...) -> None: ...
    def add_signal_handler(self, sig, callback, *args) -> None: ...
    def remove_signal_handler(self, sig) -> None: ...
    def set_task_factory(self, factory) -> None: ...
    def get_task_factory(self) -> None: ...
    def get_exception_handler(self) -> None: ...
    def set_exception_handler(self, handler) -> None: ...
    def default_exception_handler(self, context) -> None: ...
    def call_exception_handler(self, context) -> None: ...
    def get_debug(self) -> None: ...
    def set_debug(self, enabled) -> None: ...

class AbstractEventLoopPolicy:
    def get_event_loop(self) -> None: ...
    def set_event_loop(self, loop) -> None: ...
    def new_event_loop(self) -> None: ...
    def get_child_watcher(self) -> None: ...
    def set_child_watcher(self, watcher) -> None: ...

class BaseDefaultEventLoopPolicy(AbstractEventLoopPolicy):
    class _Local(threading.local): ...
    def __init__(self) -> None: ...
    def get_event_loop(self): ...
    def set_event_loop(self, loop) -> None: ...
    def new_event_loop(self): ...

class _RunningLoop(threading.local):
    loop_pid: Incomplete

def get_running_loop(): ...
def get_event_loop_policy(): ...
def set_event_loop_policy(policy) -> None: ...
def get_event_loop(): ...
def set_event_loop(loop) -> None: ...
def new_event_loop(): ...
def get_child_watcher(): ...
def set_child_watcher(watcher): ...
