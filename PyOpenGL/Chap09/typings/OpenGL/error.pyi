"""
This type stub file was generated by pyright.
"""

from OpenGL import _configflags

"""Implementation of OpenGL errors/exceptions

Note that OpenGL-ctypes will also throw standard errors,
such as TypeError or ValueError when appropriate.

ErrorChecker is an _ErrorChecker instance that allows you
to register a new error-checking function for use 
throughout the system.
"""
_log = ...
class Error(Exception):
    """Base class for all PyOpenGL-specific exception classes"""
    ...


class NoContext(Error):
    """Raised to indicate that there is no currently active context
    
    Technically almost *any* OpenGL call can segfault if there is 
    no active context.  The OpenGL.CHECK_CONTEXT flag, if enabled 
    will cause this error to be raised whenever a GL or GLU call is 
    issued (via PyOpenGL) if there is no currently valid context.
    """
    ...


class CopyError(Error):
    """Raised to indicate that operation requires data-copying
    
    if you set:
        OpenGL.ERROR_ON_COPY = True 
    
    before importing OpenGL.GL, this error will be raised when 
    a passed argument would require a copy to be made.
    """
    ...


class NullFunctionError(Error):
    """Error raised when an undefined function is called"""
    ...


class GLError(Error):
    """OpenGL core error implementation class
    
    Primary purpose of this error class is to allow for 
    annotating an error with more details about the calling 
    environment so that it's easier to debug errors in the
    wrapping process.
    
    Attributes:
    
        err -- the OpenGL error code for the error 
        result -- the OpenGL result code for the operation
        baseOperation -- the "function" being called
        pyArgs -- the translated set of Python arguments
        cArgs -- the Python objects matching 1:1 the C arguments
        cArguments -- ctypes-level arguments to the operation,
            often raw integers for pointers and the like
        description -- OpenGL description of the error (textual)
    """
    def __init__(self, err=..., result=..., cArguments=..., baseOperation=..., pyArgs=..., cArgs=..., description=...) -> None:
        """Initialise the GLError, storing metadata for later display"""
        ...
    
    DISPLAY_ORDER = ...
    def __str__(self) -> str:
        """Create a fully formatted representation of the error"""
        ...
    
    def __repr__(self):
        """Produce a much shorter version of the error as a string"""
        ...
    
    def format_description(self, property, value):
        """Format description using GLU's gluErrorString"""
        ...
    
    def shortRepr(self, value, firstLevel=...):
        """Retrieve short representation of the given value"""
        ...
    
    def format_baseOperation(self, property, value):
        """Format a baseOperation reference for display"""
        ...
    


class GLUError(Error):
    """GLU error implementation class"""
    ...


class GLUTError(Error):
    """GLUT error implementation class"""
    ...


class EGLError(GLError):
    """EGL error implementation class"""
    ...


if _configflags.ERROR_CHECKING:
    _ErrorChecker = ...
else:
    _ErrorChecker = ...
GLUerror = GLUError
GLerror = GLError
GLUTerror = GLUTError
