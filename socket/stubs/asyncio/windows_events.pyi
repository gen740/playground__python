from . import base_subprocess, events, futures, proactor_events, selector_events
from _typeshed import Incomplete

class _OverlappedFuture(futures.Future):
    def __init__(self, ov, *, loop: Incomplete | None = ...) -> None: ...
    def cancel(self, msg: Incomplete | None = ...): ...
    def set_exception(self, exception) -> None: ...
    def set_result(self, result) -> None: ...

class _BaseWaitHandleFuture(futures.Future):
    def __init__(self, ov, handle, wait_handle, *, loop: Incomplete | None = ...) -> None: ...
    def cancel(self, msg: Incomplete | None = ...): ...
    def set_exception(self, exception) -> None: ...
    def set_result(self, result) -> None: ...

class _WaitCancelFuture(_BaseWaitHandleFuture):
    def __init__(self, ov, event, wait_handle, *, loop: Incomplete | None = ...) -> None: ...
    def cancel(self) -> None: ...
    def set_result(self, result) -> None: ...
    def set_exception(self, exception) -> None: ...

class _WaitHandleFuture(_BaseWaitHandleFuture):
    def __init__(self, ov, handle, wait_handle, proactor, *, loop: Incomplete | None = ...) -> None: ...

class PipeServer:
    def __init__(self, address) -> None: ...
    def closed(self): ...
    def close(self) -> None: ...
    __del__: Incomplete

class _WindowsSelectorEventLoop(selector_events.BaseSelectorEventLoop): ...

class ProactorEventLoop(proactor_events.BaseProactorEventLoop):
    def __init__(self, proactor: Incomplete | None = ...) -> None: ...
    def run_forever(self) -> None: ...
    async def create_pipe_connection(self, protocol_factory, address): ...
    async def start_serving_pipe(self, protocol_factory, address): ...

class IocpProactor:
    def __init__(self, concurrency: int = ...) -> None: ...
    def set_loop(self, loop) -> None: ...
    def select(self, timeout: Incomplete | None = ...): ...
    def recv(self, conn, nbytes, flags: int = ...): ...
    def recv_into(self, conn, buf, flags: int = ...): ...
    def recvfrom(self, conn, nbytes, flags: int = ...): ...
    def sendto(self, conn, buf, flags: int = ..., addr: Incomplete | None = ...): ...
    def send(self, conn, buf, flags: int = ...): ...
    def accept(self, listener): ...
    def connect(self, conn, address): ...
    def sendfile(self, sock, file, offset, count): ...
    def accept_pipe(self, pipe): ...
    async def connect_pipe(self, address): ...
    def wait_for_handle(self, handle, timeout: Incomplete | None = ...): ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...

class _WindowsSubprocessTransport(base_subprocess.BaseSubprocessTransport): ...

SelectorEventLoop: Incomplete

class WindowsSelectorEventLoopPolicy(events.BaseDefaultEventLoopPolicy): ...
class WindowsProactorEventLoopPolicy(events.BaseDefaultEventLoopPolicy): ...
DefaultEventLoopPolicy = WindowsProactorEventLoopPolicy
