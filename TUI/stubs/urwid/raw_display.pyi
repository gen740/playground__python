from typing import Any
from urwid import escape as escape, signals as signals, util as util
from urwid.compat import B as B, PYTHON3 as PYTHON3, bytes as bytes
from urwid.display_common import AttrSpec as AttrSpec, BaseScreen as BaseScreen, INPUT_DESCRIPTORS_CHANGED as INPUT_DESCRIPTORS_CHANGED, RealTerminal as RealTerminal, UNPRINTABLE_TRANS_TABLE as UNPRINTABLE_TRANS_TABLE, UPDATE_PALETTE_ENTRY as UPDATE_PALETTE_ENTRY

class Screen(BaseScreen, RealTerminal):
    colors: int
    has_underline: bool
    prev_input_resize: int
    screen_buf: Any
    maxrow: Any
    gpm_mev: Any
    gpm_event_pending: bool
    last_bstate: int
    term: Any
    fg_bright_is_bold: Any
    bg_bright_is_blink: Any
    back_color_erase: Any
    signal_handler_setter: Any
    def __init__(self, input=..., output=...) -> None: ...
    max_wait: Any
    complete_wait: Any
    resize_wait: Any
    def set_input_timeouts(self, max_wait: Any | None = ..., complete_wait: float = ..., resize_wait: float = ...) -> None: ...
    def signal_init(self) -> None: ...
    def signal_restore(self) -> None: ...
    def set_mouse_tracking(self, enable: bool = ...) -> None: ...
    def write(self, data) -> None: ...
    def flush(self) -> None: ...
    def get_input(self, raw_keys: bool = ...): ...
    def get_input_descriptors(self): ...
    def unhook_event_loop(self, event_loop) -> None: ...
    def hook_event_loop(self, event_loop, callback): ...
    def get_available_raw_input(self): ...
    def parse_input(self, event_loop, callback, codes, wait_for_more: bool = ...): ...
    def get_cols_rows(self): ...
    def draw_screen(self, maxres, r): ...
    setup_G1: bool
    def clear(self) -> None: ...
    def set_terminal_properties(self, colors: Any | None = ..., bright_is_bold: Any | None = ..., has_underline: Any | None = ...) -> None: ...
    def reset_default_terminal_palette(self): ...
    def modify_terminal_palette(self, entries) -> None: ...
    AttrSpec: Any
