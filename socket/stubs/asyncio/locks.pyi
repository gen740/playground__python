from _typeshed import Incomplete

class _ContextManagerMixin:
    async def __aenter__(self) -> None: ...
    async def __aexit__(self, exc_type, exc, tb) -> None: ...

class Lock(_ContextManagerMixin):
    def __init__(self, *, loop: Incomplete | None = ...) -> None: ...
    def locked(self): ...
    async def acquire(self): ...
    def release(self) -> None: ...

class Event:
    def __init__(self, *, loop: Incomplete | None = ...) -> None: ...
    def is_set(self): ...
    def set(self) -> None: ...
    def clear(self) -> None: ...
    async def wait(self): ...

class Condition(_ContextManagerMixin):
    locked: Incomplete
    acquire: Incomplete
    release: Incomplete
    def __init__(self, lock: Incomplete | None = ..., *, loop: Incomplete | None = ...) -> None: ...
    async def wait(self): ...
    async def wait_for(self, predicate): ...
    def notify(self, n: int = ...) -> None: ...
    def notify_all(self) -> None: ...

class Semaphore(_ContextManagerMixin):
    def __init__(self, value: int = ..., *, loop: Incomplete | None = ...) -> None: ...
    def locked(self): ...
    async def acquire(self): ...
    def release(self) -> None: ...

class BoundedSemaphore(Semaphore):
    def __init__(self, value: int = ..., *, loop: Incomplete | None = ...) -> None: ...
    def release(self) -> None: ...
