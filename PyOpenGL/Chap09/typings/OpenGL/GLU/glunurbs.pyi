"""
This type stub file was generated by pyright.
"""

from OpenGL.raw import GLU as _simple
from OpenGL.GLU import glustruct
from OpenGL.lazywrapper import lazy as _lazy

"""Implementation of GLU Nurbs structure and callback methods

Same basic pattern as seen with the gluTess* functions, just need to
add some bookkeeping to the structure class so that we can keep the
Python function references alive during the calling process.
"""
class GLUnurbs(glustruct.GLUStruct, _simple.GLUnurbs):
    """GLU Nurbs structure with oor and callback storage support

    IMPORTANT NOTE: the texture coordinate callback receives a raw ctypes
    data-pointer, as without knowing what type of evaluation is being done
    (1D or 2D) we cannot safely determine the size of the array to convert
    it.  This is a limitation of the C implementation.  To convert to regular
    data-pointer, just call yourNurb.ptrAsArray( ptr, size, arrays.GLfloatArray )
    with the size of data you expect.
    """
    FUNCTION_TYPE = ...
    CALLBACK_FUNCTION_REGISTRARS = ...
    CALLBACK_TYPES = ...
    WRAPPER_METHODS = ...


def gluNurbsCallback(nurb, which, CallBackFunc):
    """Dispatch to the nurb's addCallback operation"""
    ...

@_lazy(_simple.gluNewNurbsRenderer)
def gluNewNurbsRenderer(baseFunction):
    """Return a new nurbs renderer for the system (dereferences pointer)"""
    ...

@_lazy(_simple.gluNurbsCallbackData)
def gluNurbsCallbackData(baseFunction, nurb, userData):
    """Note the Python object for use as userData by the nurb"""
    ...

MAX_ORDER = ...
def checkOrder(order, knotCount, name):
    """Check that order is valid..."""
    ...

def checkKnots(knots, name):
    """Check that knots are in ascending order"""
    ...

@_lazy(_simple.gluNurbsCallbackDataEXT)
def gluNurbsCallbackDataEXT(baseFunction, nurb, userData):
    """Note the Python object for use as userData by the nurb"""
    ...

@_lazy(_simple.gluNurbsCurve)
def gluNurbsCurve(baseFunction, nurb, knots, control, type):
    """Pythonic version of gluNurbsCurve

    Calculates knotCount, stride, and order automatically
    """
    ...

@_lazy(_simple.gluNurbsSurface)
def gluNurbsSurface(baseFunction, nurb, sKnots, tKnots, control, type):
    """Pythonic version of gluNurbsSurface

    Calculates knotCount, stride, and order automatically
    """
    ...

@_lazy(_simple.gluPwlCurve)
def gluPwlCurve(baseFunction, nurb, data, type):
    """gluPwlCurve -- piece-wise linear curve within GLU context

    data -- the data-array
    type -- determines number of elements/data-point
    """
    ...

