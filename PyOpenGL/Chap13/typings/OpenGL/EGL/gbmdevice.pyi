"""
This type stub file was generated by pyright.
"""

from OpenGL import _opaque

"""Utility module for interacting with GBM to select rendering device

The base code here comes from github bug report #6 in the pyopengl
project, thanks to @abandoned-cocoon for that.
"""
log = ...
gbm = ...
_DEVICE_HANDLES = ...
GBM_BO_USE_SCANOUT = ...
GBM_BO_USE_CURSOR = ...
GBM_BO_USE_CURSOR_64X64 = ...
GBM_BO_USE_RENDERING = ...
GBM_BO_USE_WRITE = ...
GBM_BO_USE_LINEAR = ...
GBMDevice = _opaque.opaque_pointer_cls('GBMDevice')
GBMSurface = _opaque.opaque_pointer_cls('GBMSurface')
def filter_bad_drivers(cards, bad_drivers=...):
    """Lookup the driver for each card to exclude loading nvidia devices"""
    ...

def enumerate_devices():
    """Enumerate the set of gbm renderD* devices on the system
    
    Attempts to filter out any nvidia drivers with filter_bad_drivers
    along the way.
    """
    ...

def open_device(path):
    """Open a particular gbm device
    
    * path -- integer index of devices in sorted enumeration, or
              device basename (`renderD128`) or a full path-name
              as returned from enumerate_devices

    Will raise (at least):

    * RuntimeError for invalid indices
    * IOError/OSError for device access failures
    * RuntimeError if we cannot create the gbm device

    Caller is responsible for calling close_device(display) on the 
    resulting opaque pointer in order to release the open file-handle
    and deallocate the gbm_device record.

    returns GBMDevice, an opaque pointer
    """
    ...

def close_device(device):
    """Close an opened gbm device"""
    ...

def create_surface(device, width=..., height=..., format=..., flags=...):
    """Create a GBM surface to use on the given device
    
    devices -- opaque GBMDevice pointer
    width,height -- dimensions
    format -- EGL_NATIVE_VISUAL_ID from an EGL configuration
    flags -- surface flags regarding reading/writing pattern that
             is expected for the buffer
    
    returns GBMSurface opaque pointer
    """
    ...

