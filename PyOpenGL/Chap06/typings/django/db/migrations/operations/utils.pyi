"""
This type stub file was generated by pyright.
"""

from collections import namedtuple

def resolve_relation(model, app_label=..., model_name=...):
    """
    Turn a model class or model reference string and return a model tuple.

    app_label and model_name are used to resolve the scope of recursive and
    unscoped model relationship.
    """
    ...

FieldReference = namedtuple('FieldReference', 'to through')
def field_references(model_tuple, field, reference_model_tuple, reference_field_name=..., reference_field=...):
    """
    Return either False or a FieldReference if `field` references provided
    context.

    False positives can be returned if `reference_field_name` is provided
    without `reference_field` because of the introspection limitation it
    incurs. This should not be an issue when this function is used to determine
    whether or not an optimization can take place.
    """
    ...

def get_references(state, model_tuple, field_tuple=...):
    """
    Generator of (model_state, name, field, reference) referencing
    provided context.

    If field_tuple is provided only references to this particular field of
    model_tuple will be generated.
    """
    ...

def field_is_referenced(state, model_tuple, field_tuple):
    """Return whether `field_tuple` is referenced by any state models."""
    ...

