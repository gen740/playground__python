import socket

class TransportSocket:
    def __init__(self, sock: socket.socket) -> None: ...
    @property
    def family(self): ...
    @property
    def type(self): ...
    @property
    def proto(self): ...
    def fileno(self): ...
    def dup(self): ...
    def get_inheritable(self): ...
    def shutdown(self, how) -> None: ...
    def getsockopt(self, *args, **kwargs): ...
    def setsockopt(self, *args, **kwargs) -> None: ...
    def getpeername(self): ...
    def getsockname(self): ...
    def getsockbyname(self): ...
    def accept(self): ...
    def connect(self, *args, **kwargs): ...
    def connect_ex(self, *args, **kwargs): ...
    def bind(self, *args, **kwargs): ...
    def ioctl(self, *args, **kwargs): ...
    def listen(self, *args, **kwargs): ...
    def makefile(self): ...
    def sendfile(self, *args, **kwargs): ...
    def close(self): ...
    def detach(self): ...
    def sendmsg_afalg(self, *args, **kwargs): ...
    def sendmsg(self, *args, **kwargs): ...
    def sendto(self, *args, **kwargs): ...
    def send(self, *args, **kwargs): ...
    def sendall(self, *args, **kwargs): ...
    def set_inheritable(self, *args, **kwargs): ...
    def share(self, process_id): ...
    def recv_into(self, *args, **kwargs): ...
    def recvfrom_into(self, *args, **kwargs): ...
    def recvmsg_into(self, *args, **kwargs): ...
    def recvmsg(self, *args, **kwargs): ...
    def recvfrom(self, *args, **kwargs): ...
    def recv(self, *args, **kwargs): ...
    def settimeout(self, value) -> None: ...
    def gettimeout(self): ...
    def setblocking(self, flag) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *err): ...
