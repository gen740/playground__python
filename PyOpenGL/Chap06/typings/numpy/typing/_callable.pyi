"""
This type stub file was generated by pyright.
"""

import sys
from typing import Any, NoReturn, Protocol, TYPE_CHECKING, Tuple, TypeVar, Union, overload
from numpy import complex128, complexfloating, float64, floating, generic, int8, integer, number, signedinteger, timedelta64, unsignedinteger
from ._scalars import _BoolLike, _FloatLike, _IntLike, _NumberLike
from . import NBitBase

"""
This type stub file was generated by pyright.
"""
if sys.version_info >= (3, 8):
    HAVE_PROTOCOL = ...
else:
    ...
if TYPE_CHECKING or HAVE_PROTOCOL:
    _T = TypeVar("_T")
    _2Tuple = Tuple[_T, _T]
    _NBit_co = TypeVar("_NBit_co", covariant=True, bound=NBitBase)
    _NBit = TypeVar("_NBit", bound=NBitBase)
    _IntType = TypeVar("_IntType", bound=integer)
    _FloatType = TypeVar("_FloatType", bound=floating)
    _NumberType = TypeVar("_NumberType", bound=number)
    _NumberType_co = TypeVar("_NumberType_co", covariant=True, bound=number)
    _GenericType_co = TypeVar("_GenericType_co", covariant=True, bound=generic)
    class _BoolOp(Protocol[_GenericType_co]):
        @overload
        def __call__(self, __other: _BoolLike) -> _GenericType_co:
            ...
        
        @overload
        def __call__(self, __other: int) -> signedinteger[Any]:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: complex) -> complex128:
            ...
        
        @overload
        def __call__(self, __other: _NumberType) -> _NumberType:
            ...
        
    
    
    class _BoolBitOp(Protocol[_GenericType_co]):
        @overload
        def __call__(self, __other: _BoolLike) -> _GenericType_co:
            ...
        
        @overload
        def __call__(self, __other: int) -> signedinteger[Any]:
            ...
        
        @overload
        def __call__(self, __other: _IntType) -> _IntType:
            ...
        
    
    
    class _BoolSub(Protocol):
        @overload
        def __call__(self, __other: bool) -> NoReturn:
            ...
        
        @overload
        def __call__(self, __other: int) -> signedinteger[Any]:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: complex) -> complex128:
            ...
        
        @overload
        def __call__(self, __other: _NumberType) -> _NumberType:
            ...
        
    
    
    class _BoolTrueDiv(Protocol):
        @overload
        def __call__(self, __other: Union[float, _IntLike, _BoolLike]) -> float64:
            ...
        
        @overload
        def __call__(self, __other: complex) -> complex128:
            ...
        
        @overload
        def __call__(self, __other: _NumberType) -> _NumberType:
            ...
        
    
    
    class _BoolMod(Protocol):
        @overload
        def __call__(self, __other: _BoolLike) -> int8:
            ...
        
        @overload
        def __call__(self, __other: int) -> signedinteger[Any]:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: _IntType) -> _IntType:
            ...
        
        @overload
        def __call__(self, __other: _FloatType) -> _FloatType:
            ...
        
    
    
    class _BoolDivMod(Protocol):
        @overload
        def __call__(self, __other: _BoolLike) -> _2Tuple[int8]:
            ...
        
        @overload
        def __call__(self, __other: int) -> _2Tuple[signedinteger[Any]]:
            ...
        
        @overload
        def __call__(self, __other: float) -> _2Tuple[float64]:
            ...
        
        @overload
        def __call__(self, __other: _IntType) -> _2Tuple[_IntType]:
            ...
        
        @overload
        def __call__(self, __other: _FloatType) -> _2Tuple[_FloatType]:
            ...
        
    
    
    class _TD64Div(Protocol[_NumberType_co]):
        @overload
        def __call__(self, __other: timedelta64) -> _NumberType_co:
            ...
        
        @overload
        def __call__(self, __other: _FloatLike) -> timedelta64:
            ...
        
    
    
    class _IntTrueDiv(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> floating[_NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: int) -> floating[Any]:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: complex) -> complex128:
            ...
        
        @overload
        def __call__(self, __other: integer[_NBit]) -> floating[Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _UnsignedIntOp(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> unsignedinteger[_NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: Union[int, signedinteger[Any]]) -> Any:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: complex) -> complex128:
            ...
        
        @overload
        def __call__(self, __other: unsignedinteger[_NBit]) -> unsignedinteger[Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _UnsignedIntBitOp(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> unsignedinteger[_NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: int) -> signedinteger[Any]:
            ...
        
        @overload
        def __call__(self, __other: signedinteger[Any]) -> signedinteger[Any]:
            ...
        
        @overload
        def __call__(self, __other: unsignedinteger[_NBit]) -> unsignedinteger[Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _UnsignedIntMod(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> unsignedinteger[_NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: Union[int, signedinteger[Any]]) -> Any:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: unsignedinteger[_NBit]) -> unsignedinteger[Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _UnsignedIntDivMod(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> _2Tuple[signedinteger[_NBit_co]]:
            ...
        
        @overload
        def __call__(self, __other: Union[int, signedinteger[Any]]) -> _2Tuple[Any]:
            ...
        
        @overload
        def __call__(self, __other: float) -> _2Tuple[float64]:
            ...
        
        @overload
        def __call__(self, __other: unsignedinteger[_NBit]) -> _2Tuple[unsignedinteger[Union[_NBit_co, _NBit]]]:
            ...
        
    
    
    class _SignedIntOp(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> signedinteger[_NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: int) -> signedinteger[Any]:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: complex) -> complex128:
            ...
        
        @overload
        def __call__(self, __other: signedinteger[_NBit]) -> signedinteger[Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _SignedIntBitOp(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> signedinteger[_NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: int) -> signedinteger[Any]:
            ...
        
        @overload
        def __call__(self, __other: signedinteger[_NBit]) -> signedinteger[Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _SignedIntMod(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> signedinteger[_NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: int) -> signedinteger[Any]:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: signedinteger[_NBit]) -> signedinteger[Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _SignedIntDivMod(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> _2Tuple[signedinteger[_NBit_co]]:
            ...
        
        @overload
        def __call__(self, __other: int) -> _2Tuple[signedinteger[Any]]:
            ...
        
        @overload
        def __call__(self, __other: float) -> _2Tuple[float64]:
            ...
        
        @overload
        def __call__(self, __other: signedinteger[_NBit]) -> _2Tuple[signedinteger[Union[_NBit_co, _NBit]]]:
            ...
        
    
    
    class _FloatOp(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> floating[_NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: int) -> floating[Any]:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: complex) -> complex128:
            ...
        
        @overload
        def __call__(self, __other: Union[integer[_NBit], floating[_NBit]]) -> floating[Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _FloatMod(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> floating[_NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: int) -> floating[Any]:
            ...
        
        @overload
        def __call__(self, __other: float) -> float64:
            ...
        
        @overload
        def __call__(self, __other: Union[integer[_NBit], floating[_NBit]]) -> floating[Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _FloatDivMod(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> _2Tuple[floating[_NBit_co]]:
            ...
        
        @overload
        def __call__(self, __other: int) -> _2Tuple[floating[Any]]:
            ...
        
        @overload
        def __call__(self, __other: float) -> _2Tuple[float64]:
            ...
        
        @overload
        def __call__(self, __other: Union[integer[_NBit], floating[_NBit]]) -> _2Tuple[floating[Union[_NBit_co, _NBit]]]:
            ...
        
    
    
    class _ComplexOp(Protocol[_NBit_co]):
        @overload
        def __call__(self, __other: bool) -> complexfloating[_NBit_co, _NBit_co]:
            ...
        
        @overload
        def __call__(self, __other: int) -> complexfloating[Any, Any]:
            ...
        
        @overload
        def __call__(self, __other: Union[float, complex]) -> complex128:
            ...
        
        @overload
        def __call__(self, __other: Union[integer[_NBit], floating[_NBit], complexfloating[_NBit, _NBit]]) -> complexfloating[Union[_NBit_co, _NBit], Union[_NBit_co, _NBit]]:
            ...
        
    
    
    class _NumberOp(Protocol):
        def __call__(self, __other: _NumberLike) -> number:
            ...
        
    
    
else:
    ...
