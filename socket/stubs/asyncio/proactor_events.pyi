from . import base_events, transports
from _typeshed import Incomplete

class _ProactorBasePipeTransport(transports._FlowControlMixin, transports.BaseTransport):
    def __init__(self, loop, sock, protocol, waiter: Incomplete | None = ..., extra: Incomplete | None = ..., server: Incomplete | None = ...) -> None: ...
    def set_protocol(self, protocol) -> None: ...
    def get_protocol(self): ...
    def is_closing(self): ...
    def close(self) -> None: ...
    def __del__(self, _warn=...) -> None: ...
    def get_write_buffer_size(self): ...

class _ProactorReadPipeTransport(_ProactorBasePipeTransport, transports.ReadTransport):
    def __init__(self, loop, sock, protocol, waiter: Incomplete | None = ..., extra: Incomplete | None = ..., server: Incomplete | None = ...) -> None: ...
    def is_reading(self): ...
    def pause_reading(self) -> None: ...
    def resume_reading(self) -> None: ...

class _ProactorBaseWritePipeTransport(_ProactorBasePipeTransport, transports.WriteTransport):
    def __init__(self, *args, **kw) -> None: ...
    def write(self, data) -> None: ...
    def can_write_eof(self): ...
    def write_eof(self) -> None: ...
    def abort(self) -> None: ...

class _ProactorWritePipeTransport(_ProactorBaseWritePipeTransport):
    def __init__(self, *args, **kw) -> None: ...

class _ProactorDatagramTransport(_ProactorBasePipeTransport, transports.DatagramTransport):
    max_size: Incomplete
    def __init__(self, loop, sock, protocol, address: Incomplete | None = ..., waiter: Incomplete | None = ..., extra: Incomplete | None = ...) -> None: ...
    def get_write_buffer_size(self): ...
    def abort(self) -> None: ...
    def sendto(self, data, addr: Incomplete | None = ...) -> None: ...

class _ProactorDuplexPipeTransport(_ProactorReadPipeTransport, _ProactorBaseWritePipeTransport, transports.Transport):
    def can_write_eof(self): ...
    def write_eof(self) -> None: ...

class _ProactorSocketTransport(_ProactorReadPipeTransport, _ProactorBaseWritePipeTransport, transports.Transport):
    def __init__(self, loop, sock, protocol, waiter: Incomplete | None = ..., extra: Incomplete | None = ..., server: Incomplete | None = ...) -> None: ...
    def can_write_eof(self): ...
    def write_eof(self) -> None: ...

class BaseProactorEventLoop(base_events.BaseEventLoop):
    def __init__(self, proactor) -> None: ...
    def close(self) -> None: ...
    async def sock_recv(self, sock, n): ...
    async def sock_recv_into(self, sock, buf): ...
    async def sock_sendall(self, sock, data): ...
    async def sock_connect(self, sock, address): ...
    async def sock_accept(self, sock): ...
