"""
This type stub file was generated by pyright.
"""

import sys
from typing import List, TYPE_CHECKING
from ._scalars import _BoolLike, _CharLike, _ComplexLike, _FloatLike, _IntLike, _NumberLike, _ScalarLike, _VoidLike
from ._array_like import ArrayLike as ArrayLike, _SupportsArray
from ._shape import _Shape, _ShapeLike
from ._dtype_like import DTypeLike as DTypeLike, _SupportsDType, _VoidDTypeLike
from ._add_docstring import _docstrings
from numpy._pytesttester import PytestTester

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
else:
    ...
if not TYPE_CHECKING:
    ...
else:
    __all__: List[str]
    ...
@final
class NBitBase:
    """
    An object representing `numpy.number` precision during static type checking.

    Used exclusively for the purpose static type checking, `NBitBase`
    represents the base of a hierachieral set of subclasses.
    Each subsequent subclass is herein used for representing a lower level
    of precision, *e.g.* ``64Bit > 32Bit > 16Bit``.

    Examples
    --------
    Below is a typical usage example: `NBitBase` is herein used for annotating a
    function that takes a float and integer of arbitrary precision as arguments
    and returns a new float of whichever precision is largest
    (*e.g.* ``np.float16 + np.int64 -> np.float64``).

    .. code-block:: python

        >>> from typing import TypeVar, TYPE_CHECKING
        >>> import numpy as np
        >>> import numpy.typing as npt

        >>> T = TypeVar("T", bound=npt.NBitBase)

        >>> def add(a: "np.floating[T]", b: "np.integer[T]") -> "np.floating[T]":
        ...     return a + b

        >>> a = np.float16()
        >>> b = np.int64()
        >>> out = add(a, b)

        >>> if TYPE_CHECKING:
        ...     reveal_locals()
        ...     # note: Revealed local types are:
        ...     # note:     a: numpy.floating[numpy.typing._16Bit*]
        ...     # note:     b: numpy.signedinteger[numpy.typing._64Bit*]
        ...     # note:     out: numpy.floating[numpy.typing._64Bit*]

    """
    def __init_subclass__(cls) -> None:
        ...
    


class _256Bit(NBitBase):
    ...


class _128Bit(_256Bit):
    ...


class _96Bit(_128Bit):
    ...


class _80Bit(_96Bit):
    ...


class _64Bit(_80Bit):
    ...


class _32Bit(_64Bit):
    ...


class _16Bit(_32Bit):
    ...


class _8Bit(_16Bit):
    ...


if __doc__ is not None:
    ...
test = ...
