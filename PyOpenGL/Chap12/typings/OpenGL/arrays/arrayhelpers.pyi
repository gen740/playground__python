"""
This type stub file was generated by pyright.
"""

from OpenGL import _configflags, acceleratesupport, converters

"""
This type stub file was generated by pyright.
"""
_log = ...
AsArrayTypedSizeChecked = ...
if acceleratesupport.ACCELERATE_AVAILABLE:
    ...
if AsArrayTypedSizeChecked is None:
    def returnPointer(result, baseOperation, pyArgs, cArgs):
        """Return the converted object as result of function
        
        Note: this is a hack that always returns pyArgs[0]!
        """
        ...
    
    class AsArrayOfType(converters.PyConverter):
        """Given arrayName and typeName coerce arrayName to array of type typeName
        
        TODO: It should be possible to drop this if ERROR_ON_COPY,
        as array inputs always have to be the final objects in that 
        case.
        """
        argNames = ...
        indexLookups = ...
        def __init__(self, arrayName=..., typeName=...) -> None:
            ...
        
        def __call__(self, arg, wrappedOperation, args):
            """Get the arg as an array of the appropriate type"""
            ...
        
    
    
    class AsArrayTyped(converters.PyConverter):
        """Given arrayName and arrayType, convert arrayName to array of type
        
        TODO: It should be possible to drop this if ERROR_ON_COPY,
        as array inputs always have to be the final objects in that 
        case.
        """
        argNames = ...
        indexLookups = ...
        def __init__(self, arrayName=..., arrayType=...) -> None:
            ...
        
        def __call__(self, arg, wrappedOperation, args):
            """Get the arg as an array of the appropriate type"""
            ...
        
    
    
    class AsArrayTypedSize(converters.CConverter):
        """Given arrayName and arrayType, determine size of arrayName
        """
        argNames = ...
        indexLookups = ...
        def __init__(self, arrayName=..., arrayType=...) -> None:
            ...
        
        def __call__(self, pyArgs, index, wrappedOperation):
            """Get the arg as an array of the appropriate type"""
            ...
        
    
    
else:
    returnPointer = ...
if not _configflags.ERROR_ON_COPY:
    def asArrayType(typ, size=...):
        """Create PyConverter to get first argument as array of type"""
        ...
    
else:
    def asArrayType(typ, size=...):
        """No converter required"""
        ...
    
if not _configflags.ARRAY_SIZE_CHECKING:
    asArrayTypeSize = ...
else:
    ...
if not _configflags.ERROR_ON_COPY:
    def asVoidArray():
        """Create PyConverter returning incoming as an array of any type"""
        ...
    
else:
    def asVoidArray():
        """If there's no copying allowed, we can use default passing"""
        ...
    
class storePointerType(object):
    """Store named pointer value in context indexed by constant
    
    pointerName -- named pointer argument 
    constant -- constant used to index in the context storage
    
    Note: OpenGL.STORE_POINTERS can be set with ERROR_ON_COPY
    to ignore this storage operation.
    
    Stores the pyArgs (i.e. result of pyConverters) for the named
    pointer argument...
    """
    def __init__(self, pointerName, constant) -> None:
        ...
    
    def finalise(self, wrapper):
        ...
    
    def __call__(self, result, baseOperation, pyArgs, cArgs):
        ...
    


def setInputArraySizeType(baseOperation, size, type, argName=...):
    """Decorate function with vector-handling code for a single argument
    
    if OpenGL.ERROR_ON_COPY is False, then we return the 
    named argument, converting to the passed array type,
    optionally checking that the array matches size.
    
    if OpenGL.ERROR_ON_COPY is True, then we will dramatically 
    simplify this function, only wrapping if size is True, i.e.
    only wrapping if we intend to do a size check on the array.
    """
    ...

def arraySizeOfFirstType(typ, default):
    ...

