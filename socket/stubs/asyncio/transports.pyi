from _typeshed import Incomplete

class BaseTransport:
    def __init__(self, extra: Incomplete | None = ...) -> None: ...
    def get_extra_info(self, name, default: Incomplete | None = ...): ...
    def is_closing(self) -> None: ...
    def close(self) -> None: ...
    def set_protocol(self, protocol) -> None: ...
    def get_protocol(self) -> None: ...

class ReadTransport(BaseTransport):
    def is_reading(self) -> None: ...
    def pause_reading(self) -> None: ...
    def resume_reading(self) -> None: ...

class WriteTransport(BaseTransport):
    def set_write_buffer_limits(self, high: Incomplete | None = ..., low: Incomplete | None = ...) -> None: ...
    def get_write_buffer_size(self) -> None: ...
    def get_write_buffer_limits(self) -> None: ...
    def write(self, data) -> None: ...
    def writelines(self, list_of_data) -> None: ...
    def write_eof(self) -> None: ...
    def can_write_eof(self) -> None: ...
    def abort(self) -> None: ...

class Transport(ReadTransport, WriteTransport): ...

class DatagramTransport(BaseTransport):
    def sendto(self, data, addr: Incomplete | None = ...) -> None: ...
    def abort(self) -> None: ...

class SubprocessTransport(BaseTransport):
    def get_pid(self) -> None: ...
    def get_returncode(self) -> None: ...
    def get_pipe_transport(self, fd) -> None: ...
    def send_signal(self, signal) -> None: ...
    def terminate(self) -> None: ...
    def kill(self) -> None: ...

class _FlowControlMixin(Transport):
    def __init__(self, extra: Incomplete | None = ..., loop: Incomplete | None = ...) -> None: ...
    def get_write_buffer_limits(self): ...
    def set_write_buffer_limits(self, high: Incomplete | None = ..., low: Incomplete | None = ...) -> None: ...
    def get_write_buffer_size(self) -> None: ...
