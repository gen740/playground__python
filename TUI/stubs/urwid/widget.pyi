from typing import Any
from urwid import signals as signals, text_layout as text_layout
from urwid.canvas import CanvasCache as CanvasCache, CompositeCanvas as CompositeCanvas, SolidCanvas as SolidCanvas, apply_text_layout as apply_text_layout
from urwid.command_map import CURSOR_DOWN as CURSOR_DOWN, CURSOR_LEFT as CURSOR_LEFT, CURSOR_MAX_LEFT as CURSOR_MAX_LEFT, CURSOR_MAX_RIGHT as CURSOR_MAX_RIGHT, CURSOR_RIGHT as CURSOR_RIGHT, CURSOR_UP as CURSOR_UP, command_map as command_map
from urwid.compat import text_type as text_type, with_metaclass as with_metaclass
from urwid.split_repr import python3_repr as python3_repr, remove_defaults as remove_defaults, split_repr as split_repr
from urwid.text_layout import calc_coords as calc_coords, calc_pos as calc_pos, shift_line as shift_line
from urwid.util import MetaSuper as MetaSuper, calc_width as calc_width, decompose_tagmarkup as decompose_tagmarkup, is_wide_char as is_wide_char, move_next_char as move_next_char, move_prev_char as move_prev_char

FLOW: str
BOX: str
FIXED: str
LEFT: str
RIGHT: str
CENTER: str
TOP: str
MIDDLE: str
BOTTOM: str
SPACE: str
ANY: str
CLIP: str
ELLIPSIS: str
PACK: str
GIVEN: str
RELATIVE: str
RELATIVE_100: Any
WEIGHT: str

class WidgetMeta(MetaSuper, signals.MetaSignals):
    def __init__(cls, name, bases, d) -> None: ...

class WidgetError(Exception): ...

def validate_size(widget, size, canv) -> None: ...
def update_wrapper(new_fn, fn) -> None: ...
def cache_widget_render(cls): ...
def nocache_widget_render(cls): ...
def nocache_widget_render_instance(self): ...
def cache_widget_rows(cls): ...

class Widget:
    def selectable(self): ...
    def sizing(self): ...
    def pack(self, size, focus: bool = ...): ...
    base_widget: Any
    focus: Any
    focus_position: Any

class FlowWidget(Widget):
    def rows(self, size, focus: bool = ...) -> None: ...
    def render(self, size, focus: bool = ...) -> None: ...

class BoxWidget(Widget):
    def render(self, size, focus: bool = ...) -> None: ...

def fixed_size(size) -> None: ...

class FixedWidget(Widget):
    def render(self, size, focus: bool = ...) -> None: ...
    def pack(self, size: Any | None = ..., focus: bool = ...) -> None: ...

class Divider(Widget):
    ignore_focus: bool
    div_char: Any
    top: Any
    bottom: Any
    def __init__(self, div_char: str = ..., top: int = ..., bottom: int = ...) -> None: ...
    def rows(self, size, focus: bool = ...): ...
    def render(self, size, focus: bool = ...): ...

class SolidFill(BoxWidget):
    ignore_focus: bool
    fill_char: Any
    def __init__(self, fill_char: str = ...) -> None: ...
    def render(self, size, focus: bool = ...): ...

class TextError(Exception): ...

class Text(Widget):
    ignore_focus: bool
    def __init__(self, markup, align=..., wrap=..., layout: Any | None = ...) -> None: ...
    def set_text(self, markup) -> None: ...
    def get_text(self): ...
    text: Any
    attrib: Any
    def set_align_mode(self, mode) -> None: ...
    def set_wrap_mode(self, mode) -> None: ...
    def set_layout(self, align, wrap, layout: Any | None = ...) -> None: ...
    align: Any
    wrap: Any
    layout: Any
    def render(self, size, focus: bool = ...): ...
    def rows(self, size, focus: bool = ...): ...
    def get_line_translation(self, maxcol, ta: Any | None = ...): ...
    def pack(self, size: Any | None = ..., focus: bool = ...): ...

class EditError(TextError): ...

class Edit(Text):
    ignore_focus: bool
    signals: Any
    def valid_char(self, ch): ...
    multiline: Any
    allow_tab: Any
    def __init__(self, caption: str = ..., edit_text: str = ..., multiline: bool = ..., align=..., wrap=..., allow_tab: bool = ..., edit_pos: Any | None = ..., layout: Any | None = ..., mask: Any | None = ...) -> None: ...
    def get_text(self): ...
    def set_text(self, markup) -> None: ...
    def get_pref_col(self, size): ...
    def update_text(self) -> None: ...
    def set_caption(self, caption) -> None: ...
    caption: Any
    highlight: Any
    pref_col_maxcol: Any
    def set_edit_pos(self, pos) -> None: ...
    edit_pos: Any
    def set_mask(self, mask) -> None: ...
    def set_edit_text(self, text) -> None: ...
    def get_edit_text(self): ...
    edit_text: Any
    def insert_text(self, text) -> None: ...
    def insert_text_result(self, text): ...
    def keypress(self, size, key): ...
    def move_cursor_to_coords(self, size, x, y): ...
    def mouse_event(self, size, event, button, x, y, focus): ...
    def render(self, size, focus: bool = ...): ...
    def get_line_translation(self, maxcol, ta: Any | None = ...): ...
    def get_cursor_coords(self, size): ...
    def position_coords(self, maxcol, pos): ...

class IntEdit(Edit):
    def valid_char(self, ch): ...
    def __init__(self, caption: str = ..., default: Any | None = ...) -> None: ...
    def keypress(self, size, key): ...
    def value(self): ...

def delegate_to_widget_mixin(attribute_name): ...

class WidgetWrapError(Exception): ...

class WidgetWrap(Widget):
    def __init__(self, w) -> None: ...
    w: Any
