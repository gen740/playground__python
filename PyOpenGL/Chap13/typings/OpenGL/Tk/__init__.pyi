"""
This type stub file was generated by pyright.
"""

import os
import sys
import logging
import math
import atexit
from OpenGL.GL import *
from OpenGL.GLU import *

"""
This type stub file was generated by pyright.
"""
_log = ...
def glTranslateScene(s, x, y, mousex, mousey):
    ...

def glRotateScene(s, xcenter, ycenter, zcenter, x, y, mousex, mousey):
    ...

def sub(x, y):
    ...

def dot(x, y):
    ...

def glDistFromLine(x, p1, p2):
    ...

TOGL_NORMAL = ...
TOGL_OVERLAY = ...
def v3distsq(a, b):
    ...

if _default_root is None:
    _default_root = ...
if sys.maxsize > 2 ** 32:
    suffix = ...
else:
    suffix = ...
if not os.path.isdir(TOGL_DLL_PATH):
    ...
def cleanup():
    ...

class Togl(Widget):
    """
    Togl Widget
    Keith Junius
    Department of Biophysical Chemistry
    University of Groningen, The Netherlands
    Very basic widget which provides access to Togl functions.
    """
    def __init__(self, master=..., cnf=..., **kw) -> None:
        ...
    
    def render(self):
        ...
    
    def swapbuffers(self):
        ...
    
    def makecurrent(self):
        ...
    
    def alloccolor(self, red, green, blue):
        ...
    
    def freecolor(self, index):
        ...
    
    def setcolor(self, index, red, green, blue):
        ...
    
    def loadbitmapfont(self, fontname):
        ...
    
    def unloadbitmapfont(self, fontbase):
        ...
    
    def uselayer(self, layer):
        ...
    
    def showoverlay(self):
        ...
    
    def hideoverlay(self):
        ...
    
    def existsoverlay(self):
        ...
    
    def getoverlaytransparentvalue(self):
        ...
    
    def ismappedoverlay(self):
        ...
    
    def alloccoloroverlay(self, red, green, blue):
        ...
    
    def freecoloroverlay(self, index):
        ...
    


class RawOpengl(Widget, Misc):
    """Widget without any sophisticated bindings\
    by Tom Schwaller"""
    def __init__(self, master=..., cnf=..., **kw) -> None:
        ...
    
    def tkRedraw(self, *dummy):
        ...
    
    def tkMap(self, *dummy):
        ...
    
    def tkExpose(self, *dummy):
        ...
    


class Opengl(RawOpengl):
    """\
Tkinter bindings for an Opengl widget.
Mike Hartshorn
Department of Chemistry
University of York, UK
http://www.yorvic.york.ac.uk/~mjh/
"""
    def __init__(self, master=..., cnf=..., **kw) -> None:
        """\
        Create an opengl widget.
        Arrange for redraws when the window is exposed or when
        it changes size."""
        ...
    
    def help(self):
        """Help for the widget."""
        ...
    
    def activate(self):
        """Cause this Opengl widget to be the current destination for drawing."""
        ...
    
    def basic_lighting(self):
        """\
        Set up some basic lighting (single infinite light source).

        Also switch on the depth buffer."""
        ...
    
    def set_background(self, r, g, b):
        """Change the background colour of the widget."""
        ...
    
    def set_centerpoint(self, x, y, z):
        """Set the new center point for the model.
        This is where we are looking."""
        ...
    
    def set_eyepoint(self, distance):
        """Set how far the eye is from the position we are looking."""
        ...
    
    def reset(self):
        """Reset rotation matrix for this widget."""
        ...
    
    def tkHandlePick(self, event):
        """Handle a pick on the scene."""
        ...
    
    def tkRecordMouse(self, event):
        """Record the current mouse position."""
        ...
    
    def StartRotate(self, event):
        ...
    
    def tkScale(self, event):
        """Scale the scene.  Achieved by moving the eye position.

        Dragging up zooms in, while dragging down zooms out
        """
        ...
    
    def do_AutoSpin(self):
        ...
    
    def tkAutoSpin(self, event):
        """Perform autospin of scene."""
        ...
    
    def tkRotate(self, event):
        """Perform rotation of scene."""
        ...
    
    def tkTranslate(self, event):
        """Perform translation of scene."""
        ...
    
    def tkRedraw(self, *dummy):
        """Cause the opengl widget to redraw itself."""
        ...
    
    def redraw(self, *args, **named):
        """Prevent access errors if user doesn't set redraw fast enough"""
        ...
    
    def tkMap(self, *dummy):
        """Cause the opengl widget to redraw itself."""
        ...
    
    def tkExpose(self, *dummy):
        """Redraw the widget.
        Make it active, update tk events, call redraw procedure and
        swap the buffers.  Note: swapbuffers is clever enough to
        only swap double buffered visuals."""
        ...
    
    def tkPrint(self, file):
        """Turn the current scene into PostScript via the feedback buffer."""
        ...
    


