"""
This type stub file was generated by pyright.
"""

from OpenGL import _configflags
from OpenGL.lazywrapper import lazy as _lazy
from OpenGL.GL.VERSION import GL_1_1 as full

"""
This type stub file was generated by pyright.
"""
glRasterPosDispatch = ...
if _configflags.ERROR_CHECKING:
    @_lazy(full.glBegin)
    def glBegin(baseFunction, mode):
        """Begin GL geometry-definition mode, disable automatic error checking"""
        ...
    
    @_lazy(full.glEnd)
    def glEnd(baseFunction):
        """Finish GL geometry-definition mode, re-enable automatic error checking"""
        ...
    
else:
    glBegin = ...
    glEnd = ...
@_lazy(full.glDeleteTextures)
def glDeleteTextures(baseFunction, size, array=...):
    """Delete specified set of textures
    
    If array is *not* passed then `size` must be a `GLuintArray`
    compatible object which can be sized using `arraySize`, the 
    result of which will be used as size.
    """
    ...

def glMap2(baseFunction, arrayType):
    ...

glMap2d = ...
glMap2f = ...
def glMap1(baseFunction, arrayType):
    ...

glMap1d = ...
glMap1f = ...
def glRasterPos(*args):
    """Choose glRasterPosX based on number of args"""
    ...

glVertexDispatch = ...
def glVertex(*args):
    """Choose glVertexX based on number of args"""
    ...

@_lazy(full.glCallLists)
def glCallLists(baseFunction, lists, *args):
    """glCallLists( bytes( lists ) or lists[] ) -> None

    Restricted version of glCallLists, takes a string or a GLuint compatible
    array data-type and passes into the base function.
    """
    ...

def glTexParameter(target, pname, parameter):
    """Set a texture parameter, choose underlying call based on pname and parameter"""
    ...

def glMaterial(faces, constant, *args):
    """glMaterial -- convenience function to dispatch on argument type

    If passed a single argument in args, calls:
        glMaterialfv( faces, constant, args[0] )
    else calls:
        glMaterialf( faces, constant, *args )
    """
    ...

glColorDispatch = ...
def glColor(*args):
    """glColor*f* -- convenience function to dispatch on argument type

    dispatches to glColor3f, glColor2f, glColor4f, glColor3f, glColor2f, glColor4f
    depending on the arguments passed...
    """
    ...

@_lazy(full.glAreTexturesResident)
def glAreTexturesResident(baseFunction, *args):
    """Allow both Pythonic and C-style calls to glAreTexturesResident

        glAreTexturesResident( arrays.GLuintArray( textures) )

    or

        glAreTexturesResident( int(n), arrays.GLuintArray( textures), arrays.GLuboolean( output) )

    or

        glAreTexturesResident( int(n), arrays.GLuintArray( textures) )

    returns the output arrays.GLubooleanArray
    """
    ...

