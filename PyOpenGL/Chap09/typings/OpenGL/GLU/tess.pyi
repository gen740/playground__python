"""
This type stub file was generated by pyright.
"""

import ctypes
from OpenGL.raw import GLU as _simple
from OpenGL.platform import createBaseFunction
from OpenGL.GLU import glustruct
from OpenGL.lazywrapper import lazy as _lazy

"""Wrapper/Implementation of the GLU tessellator objects for PyOpenGL"""
GLU = ...
class GLUtesselator(glustruct.GLUStruct, _simple.GLUtesselator):
    """Implementation class for GLUTessellator structures in OpenGL-ctypes"""
    FUNCTION_TYPE = ...
    CALLBACK_TYPES = ...
    WRAPPER_METHODS = ...
    def gluTessVertex(self, location, data=...):
        """Add a vertex to this tessellator, storing data for later lookup"""
        ...
    
    def gluTessBeginPolygon(self, data):
        """Note the object pointer to return it as a Python object"""
        ...
    
    def combineWrapper(self, function):
        """Wrap a Python function with ctypes-compatible wrapper for combine callback

        For a Python combine callback, the signature looks like this:
            def combine(
                GLdouble coords[3],
                void *vertex_data[4],
                GLfloat weight[4]
            ):
                return data
        While the C signature looks like this:
            void combine(
                GLdouble coords[3],
                void *vertex_data[4],
                GLfloat weight[4],
                void **outData
            )
        """
        ...
    
    def dataWrapper(self, function):
        """Wrap a function which only has the one data-pointer as last arg"""
        ...
    
    def dataWrapper2(self, function):
        """Wrap a function which has two data-pointers as last args"""
        ...
    
    def vertexWrapper(self, function):
        """Converts a vertex-pointer into an OOR vertex for processing"""
        ...
    


def gluTessCallback(tess, which, function):
    """Set a given gluTessellator callback for the given tessellator"""
    ...

def gluTessBeginPolygon(tess, data):
    """Start definition of polygon in the tessellator"""
    ...

def gluTessVertex(tess, location, data=...):
    """Add a vertex to the tessellator's current polygon"""
    ...

@_lazy(createBaseFunction('gluNewTess', dll=GLU, resultType=ctypes.POINTER(GLUtesselator), doc='gluNewTess(  ) -> POINTER(GLUtesselator)'))
def gluNewTess(baseFunction):
    """Get a new tessellator object (just unpacks the pointer for you)"""
    ...

@_lazy(_simple.gluGetTessProperty)
def gluGetTessProperty(baseFunction, tess, which, data=...):
    """Retrieve single double for a tessellator property"""
    ...

gluTessVertexBase = ...
