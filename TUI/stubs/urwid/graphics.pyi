from typing import Any
from urwid.canvas import CanvasCombine as CanvasCombine, CanvasJoin as CanvasJoin, CompositeCanvas as CompositeCanvas, SolidCanvas as SolidCanvas, TextCanvas as TextCanvas
from urwid.compat import ord2 as ord2, with_metaclass as with_metaclass
from urwid.container import Columns as Columns, Pile as Pile
from urwid.decoration import WidgetDecoration as WidgetDecoration
from urwid.display_common import AttrSpec as AttrSpec
from urwid.util import decompose_tagmarkup as decompose_tagmarkup, get_encoding_mode as get_encoding_mode
from urwid.widget import BOX as BOX, CENTER as CENTER, CLIP as CLIP, Divider as Divider, FIXED as FIXED, FLOW as FLOW, SolidFill as SolidFill, Text as Text, Widget as Widget, WidgetMeta as WidgetMeta, WidgetWrap as WidgetWrap, fixed_size as fixed_size, nocache_widget_render as nocache_widget_render, nocache_widget_render_instance as nocache_widget_render_instance

class BigText(Widget):
    def __init__(self, markup, font) -> None: ...
    def set_text(self, markup) -> None: ...
    def get_text(self): ...
    font: Any
    def set_font(self, font) -> None: ...
    def pack(self, size: Any | None = ..., focus: bool = ...): ...
    def render(self, size, focus: bool = ...): ...

class LineBox(WidgetDecoration, WidgetWrap):
    title_widget: Any
    tline_widget: Any
    def __init__(self, original_widget, title: str = ..., title_align: str = ..., title_attr: Any | None = ..., tlcorner: str = ..., tline: str = ..., lline: str = ..., trcorner: str = ..., blcorner: str = ..., rline: str = ..., bline: str = ..., brcorner: str = ...) -> None: ...
    def format_title(self, text): ...
    def set_title(self, text) -> None: ...
    def pack(self, size: Any | None = ..., focus: bool = ...): ...

class BarGraphMeta(WidgetMeta):
    def __init__(cls, name, bases, d): ...

def nocache_bargraph_get_data(self, get_data_fn) -> None: ...

class BarGraphError(Exception): ...

class BarGraph:
    ignore_focus: bool
    eighths: str
    hlines: str
    def __init__(self, attlist, hatt: Any | None = ..., satt: Any | None = ...) -> None: ...
    attr: Any
    char: Any
    hatt: Any
    satt: Any
    def set_segment_attributes(self, attlist, hatt: Any | None = ..., satt: Any | None = ...) -> None: ...
    data: Any
    def set_data(self, bardata, top, hlines: Any | None = ...) -> None: ...
    bar_width: Any
    def set_bar_width(self, width) -> None: ...
    def calculate_bar_widths(self, size, bardata): ...
    def selectable(self): ...
    def use_smoothed(self): ...
    def calculate_display(self, size): ...
    def hlines_display(self, disp, top, hlines, maxrow): ...
    def smooth_display(self, disp): ...
    def render(self, size, focus: bool = ...): ...

def calculate_bargraph_display(bardata, top, bar_widths, maxrow): ...

class GraphVScale(Widget):
    def __init__(self, labels, top) -> None: ...
    pos: Any
    txt: Any
    top: Any
    def set_scale(self, labels, top) -> None: ...
    def selectable(self): ...
    def render(self, size, focus: bool = ...): ...

def scale_bar_values(bar, top, maxrow): ...

class ProgressBar(Widget):
    eighths: str
    text_align: Any
    normal: Any
    complete: Any
    satt: Any
    def __init__(self, normal, complete, current: int = ..., done: int = ..., satt: Any | None = ...) -> None: ...
    def set_completion(self, current) -> None: ...
    current: Any
    done: Any
    def rows(self, size, focus: bool = ...): ...
    def get_text(self): ...
    def render(self, size, focus: bool = ...): ...

class PythonLogo(Widget):
    def __init__(self) -> None: ...
    def pack(self, size: Any | None = ..., focus: bool = ...): ...
    def render(self, size, focus: bool = ...): ...
