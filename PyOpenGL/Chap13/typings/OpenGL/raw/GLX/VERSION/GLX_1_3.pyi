"""
This type stub file was generated by pyright.
"""

import ctypes
from OpenGL import platform as _p
from OpenGL.raw.GLX import _types as _cs
from OpenGL.raw.GLX._types import *

"""
This type stub file was generated by pyright.
"""
_EXTENSION_NAME = ...
GLX_ACCUM_BUFFER_BIT = ...
GLX_AUX_BUFFERS_BIT = ...
GLX_BACK_LEFT_BUFFER_BIT = ...
GLX_BACK_RIGHT_BUFFER_BIT = ...
GLX_COLOR_INDEX_BIT = ...
GLX_COLOR_INDEX_TYPE = ...
GLX_CONFIG_CAVEAT = ...
GLX_DAMAGED = ...
GLX_DEPTH_BUFFER_BIT = ...
GLX_DIRECT_COLOR = ...
GLX_DONT_CARE = ...
GLX_DRAWABLE_TYPE = ...
GLX_EVENT_MASK = ...
GLX_FBCONFIG_ID = ...
GLX_FRONT_LEFT_BUFFER_BIT = ...
GLX_FRONT_RIGHT_BUFFER_BIT = ...
GLX_GRAY_SCALE = ...
GLX_HEIGHT = ...
GLX_LARGEST_PBUFFER = ...
GLX_MAX_PBUFFER_HEIGHT = ...
GLX_MAX_PBUFFER_PIXELS = ...
GLX_MAX_PBUFFER_WIDTH = ...
GLX_NONE = ...
GLX_NON_CONFORMANT_CONFIG = ...
GLX_PBUFFER = ...
GLX_PBUFFER_BIT = ...
GLX_PBUFFER_CLOBBER_MASK = ...
GLX_PBUFFER_HEIGHT = ...
GLX_PBUFFER_WIDTH = ...
GLX_PIXMAP_BIT = ...
GLX_PRESERVED_CONTENTS = ...
GLX_PSEUDO_COLOR = ...
GLX_RENDER_TYPE = ...
GLX_RGBA_BIT = ...
GLX_RGBA_TYPE = ...
GLX_SAVED = ...
GLX_SCREEN = ...
GLX_SLOW_CONFIG = ...
GLX_STATIC_COLOR = ...
GLX_STATIC_GRAY = ...
GLX_STENCIL_BUFFER_BIT = ...
GLX_TRANSPARENT_ALPHA_VALUE = ...
GLX_TRANSPARENT_BLUE_VALUE = ...
GLX_TRANSPARENT_GREEN_VALUE = ...
GLX_TRANSPARENT_INDEX = ...
GLX_TRANSPARENT_INDEX_VALUE = ...
GLX_TRANSPARENT_RED_VALUE = ...
GLX_TRANSPARENT_RGB = ...
GLX_TRANSPARENT_TYPE = ...
GLX_TRUE_COLOR = ...
GLX_VISUAL_ID = ...
GLX_WIDTH = ...
GLX_WINDOW = ...
GLX_WINDOW_BIT = ...
GLX_X_RENDERABLE = ...
GLX_X_VISUAL_TYPE = ...
@_f
@_p.types(ctypes.POINTER(_cs.GLXFBConfig), ctypes.POINTER(_cs.Display), _cs.c_int, ctypes.POINTER(_cs.c_int), ctypes.POINTER(_cs.c_int))
def glXChooseFBConfig(dpy, screen, attrib_list, nelements):
    ...

@_f
@_p.types(_cs.GLXContext, ctypes.POINTER(_cs.Display), _cs.GLXFBConfig, _cs.c_int, _cs.GLXContext, _cs.Bool)
def glXCreateNewContext(dpy, config, render_type, share_list, direct):
    ...

@_f
@_p.types(_cs.GLXPbuffer, ctypes.POINTER(_cs.Display), _cs.GLXFBConfig, ctypes.POINTER(_cs.c_int))
def glXCreatePbuffer(dpy, config, attrib_list):
    ...

@_f
@_p.types(_cs.GLXPixmap, ctypes.POINTER(_cs.Display), _cs.GLXFBConfig, _cs.Pixmap, ctypes.POINTER(_cs.c_int))
def glXCreatePixmap(dpy, config, pixmap, attrib_list):
    ...

@_f
@_p.types(_cs.GLXWindow, ctypes.POINTER(_cs.Display), _cs.GLXFBConfig, _cs.Window, ctypes.POINTER(_cs.c_int))
def glXCreateWindow(dpy, config, win, attrib_list):
    ...

@_f
@_p.types(None, ctypes.POINTER(_cs.Display), _cs.GLXPbuffer)
def glXDestroyPbuffer(dpy, pbuf):
    ...

@_f
@_p.types(None, ctypes.POINTER(_cs.Display), _cs.GLXPixmap)
def glXDestroyPixmap(dpy, pixmap):
    ...

@_f
@_p.types(None, ctypes.POINTER(_cs.Display), _cs.GLXWindow)
def glXDestroyWindow(dpy, win):
    ...

@_f
@_p.types(_cs.GLXDrawable)
def glXGetCurrentReadDrawable():
    ...

@_f
@_p.types(_cs.c_int, ctypes.POINTER(_cs.Display), _cs.GLXFBConfig, _cs.c_int, ctypes.POINTER(_cs.c_int))
def glXGetFBConfigAttrib(dpy, config, attribute, value):
    ...

@_f
@_p.types(ctypes.POINTER(_cs.GLXFBConfig), ctypes.POINTER(_cs.Display), _cs.c_int, ctypes.POINTER(_cs.c_int))
def glXGetFBConfigs(dpy, screen, nelements):
    ...

@_f
@_p.types(None, ctypes.POINTER(_cs.Display), _cs.GLXDrawable, ctypes.POINTER(_cs.c_ulong))
def glXGetSelectedEvent(dpy, draw, event_mask):
    ...

@_f
@_p.types(ctypes.POINTER(_cs.XVisualInfo), ctypes.POINTER(_cs.Display), _cs.GLXFBConfig)
def glXGetVisualFromFBConfig(dpy, config):
    ...

@_f
@_p.types(_cs.Bool, ctypes.POINTER(_cs.Display), _cs.GLXDrawable, _cs.GLXDrawable, _cs.GLXContext)
def glXMakeContextCurrent(dpy, draw, read, ctx):
    ...

@_f
@_p.types(_cs.c_int, ctypes.POINTER(_cs.Display), _cs.GLXContext, _cs.c_int, ctypes.POINTER(_cs.c_int))
def glXQueryContext(dpy, ctx, attribute, value):
    ...

@_f
@_p.types(None, ctypes.POINTER(_cs.Display), _cs.GLXDrawable, _cs.c_int, ctypes.POINTER(_cs.c_uint))
def glXQueryDrawable(dpy, draw, attribute, value):
    ...

@_f
@_p.types(None, ctypes.POINTER(_cs.Display), _cs.GLXDrawable, _cs.c_ulong)
def glXSelectEvent(dpy, draw, event_mask):
    ...

