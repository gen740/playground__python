"""
This type stub file was generated by pyright.
"""

import _tkinter
import sys
from _typeshed import AnyPath
from enum import Enum
from tkinter.constants import *
from tkinter.font import _FontDescription
from types import TracebackType
from typing import Any, Callable, Dict, Generic, List, Mapping, Optional, Protocol, Sequence, Tuple, Type, TypeVar, Union, overload
from typing_extensions import Literal, TypedDict

TclError = _tkinter.TclError
wantobjects: int
TkVersion: float
TclVersion: float
READABLE = ...
WRITABLE = ...
EXCEPTION = ...
_T = TypeVar("_T")
_TkinterSequence = Union[List[_T], Tuple[_T, ...]]
_TkinterSequence2D = Union[List[List[_T]], List[Tuple[_T, ...]], Tuple[List[_T], ...], Tuple[Tuple[_T, ...], ...]]
_Anchor = Literal["nw", "n", "ne", "w", "center", "e", "sw", "s", "se"]
_Bitmap = str
_ButtonCommand = Union[str, Callable[[], Any]]
_CanvasItemId = int
_Color = str
_Compound = Literal["top", "left", "center", "right", "bottom", "none"]
_Cursor = Union[str, Tuple[str], Tuple[str, str], Tuple[str, str, str], Tuple[str, str, str, str]]
_EntryValidateCommand = Union[Callable[[], bool], str, _TkinterSequence[str]]
_ImageSpec = Union[_Image, str]
_Padding = Union[_ScreenUnits, Tuple[_ScreenUnits], Tuple[_ScreenUnits, _ScreenUnits], Tuple[_ScreenUnits, _ScreenUnits, _ScreenUnits], Tuple[_ScreenUnits, _ScreenUnits, _ScreenUnits, _ScreenUnits]],
_Relief = Literal["raised", "sunken", "flat", "ridge", "solid", "groove"]
_ScreenUnits = Union[str, float]
_XYScrollCommand = Union[str, Callable[[float, float], Any]]
_TakeFocusValue = Union[int, Literal[""], Callable[[str], Optional[bool]]]
class EventType(str, Enum):
    Activate: str = ...
    ButtonPress: str = ...
    ButtonRelease: str = ...
    Circulate: str = ...
    CirculateRequest: str = ...
    ClientMessage: str = ...
    Colormap: str = ...
    Configure: str = ...
    ConfigureRequest: str = ...
    Create: str = ...
    Deactivate: str = ...
    Destroy: str = ...
    Enter: str = ...
    Expose: str = ...
    FocusIn: str = ...
    FocusOut: str = ...
    GraphicsExpose: str = ...
    Gravity: str = ...
    KeyPress: str = ...
    KeyRelease: str = ...
    Keymap: str = ...
    Leave: str = ...
    Map: str = ...
    MapRequest: str = ...
    Mapping: str = ...
    Motion: str = ...
    MouseWheel: str = ...
    NoExpose: str = ...
    Property: str = ...
    Reparent: str = ...
    ResizeRequest: str = ...
    Selection: str = ...
    SelectionClear: str = ...
    SelectionRequest: str = ...
    Unmap: str = ...
    VirtualEvent: str = ...
    Visibility: str = ...


_W = TypeVar("_W", covariant=True, bound="Misc")
class Event(Generic[_W]):
    serial: int
    num: int
    focus: bool
    height: int
    width: int
    keycode: int
    state: Union[int, str]
    time: int
    x: int
    y: int
    x_root: int
    y_root: int
    char: str
    send_event: bool
    keysym: str
    keysym_num: int
    type: EventType
    widget: _W
    delta: int
    ...


def NoDefaultRoot():
    ...

_TraceMode = Literal["array", "read", "write", "unset"]
class Variable:
    def __init__(self, master: Optional[Misc] = ..., value: Optional[Any] = ..., name: Optional[str] = ...) -> None:
        ...
    
    def set(self, value: Any) -> None:
        ...
    
    initialize = ...
    def get(self) -> Any:
        ...
    
    def trace_add(self, mode: _TraceMode, callback: Callable[[str, str, str], Any]) -> str:
        ...
    
    def trace_remove(self, mode: _TraceMode, cbname: str) -> None:
        ...
    
    def trace_info(self) -> List[Tuple[Tuple[_TraceMode, ...], str]]:
        ...
    
    def trace_variable(self, mode, callback):
        ...
    
    def trace_vdelete(self, mode, cbname):
        ...
    
    def trace_vinfo(self):
        ...
    
    trace = ...


class StringVar(Variable):
    def __init__(self, master: Optional[Misc] = ..., value: Optional[str] = ..., name: Optional[str] = ...) -> None:
        ...
    
    def set(self, value: str) -> None:
        ...
    
    initialize = ...
    def get(self) -> str:
        ...
    


class IntVar(Variable):
    def __init__(self, master: Optional[Misc] = ..., value: Optional[int] = ..., name: Optional[str] = ...) -> None:
        ...
    
    def set(self, value: int) -> None:
        ...
    
    initialize = ...
    def get(self) -> int:
        ...
    


class DoubleVar(Variable):
    def __init__(self, master: Optional[Misc] = ..., value: Optional[float] = ..., name: Optional[str] = ...) -> None:
        ...
    
    def set(self, value: float) -> None:
        ...
    
    initialize = ...
    def get(self) -> float:
        ...
    


class BooleanVar(Variable):
    def __init__(self, master: Optional[Misc] = ..., value: Optional[bool] = ..., name: Optional[str] = ...) -> None:
        ...
    
    def set(self, value: bool) -> None:
        ...
    
    initialize = ...
    def get(self) -> bool:
        ...
    


def mainloop(n: int = ...) -> None:
    ...

getint: Any
getdouble: Any
def getboolean(s):
    ...

class Misc:
    master: Optional[Misc]
    tk: _tkinter.TkappType
    children: Dict[str, Widget]
    def destroy(self) -> None:
        ...
    
    def deletecommand(self, name: str) -> None:
        ...
    
    def tk_strictMotif(self, boolean: Optional[Any] = ...):
        ...
    
    def tk_bisque(self):
        ...
    
    def tk_setPalette(self, *args, **kw):
        ...
    
    def wait_variable(self, name: Union[str, Variable] = ...) -> None:
        ...
    
    waitvar = ...
    def wait_window(self, window: Optional[Misc] = ...) -> None:
        ...
    
    def wait_visibility(self, window: Optional[Misc] = ...) -> None:
        ...
    
    def setvar(self, name: str = ..., value: str = ...):
        ...
    
    def getvar(self, name: str = ...):
        ...
    
    def getint(self, s):
        ...
    
    def getdouble(self, s):
        ...
    
    def getboolean(self, s):
        ...
    
    def focus_set(self) -> None:
        ...
    
    focus = ...
    def focus_force(self) -> None:
        ...
    
    def focus_get(self) -> Optional[Misc]:
        ...
    
    def focus_displayof(self) -> Optional[Misc]:
        ...
    
    def focus_lastfor(self) -> Optional[Misc]:
        ...
    
    def tk_focusFollowsMouse(self) -> None:
        ...
    
    def tk_focusNext(self) -> Optional[Misc]:
        ...
    
    def tk_focusPrev(self) -> Optional[Misc]:
        ...
    
    @overload
    def after(self, ms: int, func: None = ...) -> None:
        ...
    
    @overload
    def after(self, ms: Union[int, Literal["idle"]], func: Callable[..., Any], *args: Any) -> str:
        ...
    
    def after_idle(self, func: Callable[..., Any], *args: Any) -> str:
        ...
    
    def after_cancel(self, id: str) -> None:
        ...
    
    def bell(self, displayof: Union[Literal[0], Misc, None] = ...):
        ...
    
    def clipboard_get(self, *, displayof: Misc = ..., type: str = ...) -> str:
        ...
    
    def clipboard_clear(self, *, displayof: Misc = ...) -> None:
        ...
    
    def clipboard_append(self, string: str, *, displayof: Misc = ..., format: str = ..., type: str = ...):
        ...
    
    def grab_current(self):
        ...
    
    def grab_release(self):
        ...
    
    def grab_set(self):
        ...
    
    def grab_set_global(self):
        ...
    
    def grab_status(self):
        ...
    
    def option_add(self, pattern, value, priority: Optional[Any] = ...):
        ...
    
    def option_clear(self):
        ...
    
    def option_get(self, name, className):
        ...
    
    def option_readfile(self, fileName, priority: Optional[Any] = ...):
        ...
    
    def selection_clear(self, **kw):
        ...
    
    def selection_get(self, **kw):
        ...
    
    def selection_handle(self, command, **kw):
        ...
    
    def selection_own(self, **kw):
        ...
    
    def selection_own_get(self, **kw):
        ...
    
    def send(self, interp, cmd, *args):
        ...
    
    def lower(self, belowThis: Optional[Any] = ...):
        ...
    
    def tkraise(self, aboveThis: Optional[Any] = ...):
        ...
    
    lift = ...
    def winfo_atom(self, name: str, displayof: Union[Literal[0], Misc, None] = ...):
        ...
    
    def winfo_atomname(self, id: int, displayof: Union[Literal[0], Misc, None] = ...):
        ...
    
    def winfo_cells(self) -> int:
        ...
    
    def winfo_children(self) -> List[Widget]:
        ...
    
    def winfo_class(self) -> str:
        ...
    
    def winfo_colormapfull(self) -> bool:
        ...
    
    def winfo_containing(self, rootX: int, rootY: int, displayof: Union[Literal[0], Misc, None] = ...) -> Optional[Misc]:
        ...
    
    def winfo_depth(self) -> int:
        ...
    
    def winfo_exists(self) -> bool:
        ...
    
    def winfo_fpixels(self, number: _ScreenUnits) -> float:
        ...
    
    def winfo_geometry(self) -> str:
        ...
    
    def winfo_height(self) -> int:
        ...
    
    def winfo_id(self) -> int:
        ...
    
    def winfo_interps(self, displayof: Union[Literal[0], Misc, None] = ...) -> Tuple[str, ...]:
        ...
    
    def winfo_ismapped(self) -> bool:
        ...
    
    def winfo_manager(self) -> str:
        ...
    
    def winfo_name(self) -> str:
        ...
    
    def winfo_parent(self) -> str:
        ...
    
    def winfo_pathname(self, id: int, displayof: Union[Literal[0], Misc, None] = ...):
        ...
    
    def winfo_pixels(self, number: _ScreenUnits) -> int:
        ...
    
    def winfo_pointerx(self) -> int:
        ...
    
    def winfo_pointerxy(self) -> Tuple[int, int]:
        ...
    
    def winfo_pointery(self) -> int:
        ...
    
    def winfo_reqheight(self) -> int:
        ...
    
    def winfo_reqwidth(self) -> int:
        ...
    
    def winfo_rgb(self, color: _Color) -> Tuple[int, int, int]:
        ...
    
    def winfo_rootx(self) -> int:
        ...
    
    def winfo_rooty(self) -> int:
        ...
    
    def winfo_screen(self) -> str:
        ...
    
    def winfo_screencells(self) -> int:
        ...
    
    def winfo_screendepth(self) -> int:
        ...
    
    def winfo_screenheight(self) -> int:
        ...
    
    def winfo_screenmmheight(self) -> int:
        ...
    
    def winfo_screenmmwidth(self) -> int:
        ...
    
    def winfo_screenvisual(self) -> str:
        ...
    
    def winfo_screenwidth(self) -> int:
        ...
    
    def winfo_server(self) -> str:
        ...
    
    def winfo_toplevel(self) -> Union[Tk, Toplevel]:
        ...
    
    def winfo_viewable(self) -> bool:
        ...
    
    def winfo_visual(self) -> str:
        ...
    
    def winfo_visualid(self) -> str:
        ...
    
    def winfo_visualsavailable(self, includeids: int = ...) -> List[Tuple[str, int]]:
        ...
    
    def winfo_vrootheight(self) -> int:
        ...
    
    def winfo_vrootwidth(self) -> int:
        ...
    
    def winfo_vrootx(self) -> int:
        ...
    
    def winfo_vrooty(self) -> int:
        ...
    
    def winfo_width(self) -> int:
        ...
    
    def winfo_x(self) -> int:
        ...
    
    def winfo_y(self) -> int:
        ...
    
    def update(self) -> None:
        ...
    
    def update_idletasks(self) -> None:
        ...
    
    def bindtags(self, tagList: Optional[Any] = ...):
        ...
    
    @overload
    def bind(self, sequence: Optional[str] = ..., func: Optional[Callable[[Event[Misc]], Any]] = ..., add: Optional[bool] = ...) -> str:
        ...
    
    @overload
    def bind(self, sequence: Optional[str], func: str, add: Optional[bool] = ...) -> None:
        ...
    
    @overload
    def bind(self, *, func: str, add: Optional[bool] = ...) -> None:
        ...
    
    @overload
    def bind_all(self, sequence: Optional[str] = ..., func: Optional[Callable[[Event[Misc]], Any]] = ..., add: Optional[bool] = ...) -> str:
        ...
    
    @overload
    def bind_all(self, sequence: Optional[str], func: str, add: Optional[bool] = ...) -> None:
        ...
    
    @overload
    def bind_all(self, *, func: str, add: Optional[bool] = ...) -> None:
        ...
    
    @overload
    def bind_class(self, className: str, sequence: Optional[str] = ..., func: Optional[Callable[[Event[Misc]], Any]] = ..., add: Optional[bool] = ...) -> str:
        ...
    
    @overload
    def bind_class(self, className: str, sequence: Optional[str], func: str, add: Optional[bool] = ...) -> None:
        ...
    
    @overload
    def bind_class(self, className: str, *, func: str, add: Optional[bool] = ...) -> None:
        ...
    
    def unbind(self, sequence: str, funcid: Optional[str] = ...) -> None:
        ...
    
    def unbind_all(self, sequence: str) -> None:
        ...
    
    def unbind_class(self, className: str, sequence: str) -> None:
        ...
    
    def mainloop(self, n: int = ...) -> None:
        ...
    
    def quit(self):
        ...
    
    def nametowidget(self, name: Union[str, Misc, _tkinter.Tcl_Obj]) -> Any:
        ...
    
    def register(self, func: Callable[..., Any], subst: Optional[Callable[..., Sequence[Any]]] = ..., needcleanup: int = ...) -> str:
        ...
    
    def keys(self) -> List[str]:
        ...
    
    @overload
    def pack_propagate(self, flag: bool) -> Optional[bool]:
        ...
    
    @overload
    def pack_propagate(self) -> None:
        ...
    
    propagate = ...
    def grid_anchor(self, anchor: Optional[_Anchor] = ...) -> None:
        ...
    
    anchor = ...
    @overload
    def grid_bbox(self, column: None = ..., row: None = ..., col2: None = ..., row2: None = ...) -> Optional[Tuple[int, int, int, int]]:
        ...
    
    @overload
    def grid_bbox(self, column: int, row: int, col2: None = ..., row2: None = ...) -> Optional[Tuple[int, int, int, int]]:
        ...
    
    @overload
    def grid_bbox(self, column: int, row: int, col2: int, row2: int) -> Optional[Tuple[int, int, int, int]]:
        ...
    
    bbox = ...
    def grid_columnconfigure(self, index, cnf=..., **kw):
        ...
    
    def grid_rowconfigure(self, index, cnf=..., **kw):
        ...
    
    columnconfigure = ...
    rowconfigure = ...
    def grid_location(self, x: _ScreenUnits, y: _ScreenUnits) -> Tuple[int, int]:
        ...
    
    @overload
    def grid_propagate(self, flag: bool) -> None:
        ...
    
    @overload
    def grid_propagate(self) -> bool:
        ...
    
    def grid_size(self) -> Tuple[int, int]:
        ...
    
    size = ...
    def pack_slaves(self) -> List[Widget]:
        ...
    
    def grid_slaves(self, row: Optional[int] = ..., column: Optional[int] = ...) -> List[Widget]:
        ...
    
    def place_slaves(self) -> List[Widget]:
        ...
    
    slaves = ...
    def event_add(self, virtual: str, *sequences: str) -> None:
        ...
    
    def event_delete(self, virtual: str, *sequences: str) -> None:
        ...
    
    def event_generate(self, sequence: str, *, above: Union[Misc, int] = ..., borderwidth: _ScreenUnits = ..., button: int = ..., count: int = ..., data: Any = ..., delta: int = ..., detail: str = ..., focus: bool = ..., height: _ScreenUnits = ..., keycode: int = ..., keysym: str = ..., mode: str = ..., override: bool = ..., place: Literal["PlaceOnTop", "PlaceOnBottom"] = ..., root: Union[Misc, int] = ..., rootx: _ScreenUnits = ..., rooty: _ScreenUnits = ..., sendevent: bool = ..., serial: int = ..., state: Union[int, str] = ..., subwindow: Union[Misc, int] = ..., time: int = ..., warp: bool = ..., width: _ScreenUnits = ..., when: Literal["now", "tail", "head", "mark"] = ..., x: _ScreenUnits = ..., y: _ScreenUnits = ...) -> None:
        ...
    
    def event_info(self, virtual: Optional[str] = ...) -> Tuple[str, ...]:
        ...
    
    def image_names(self) -> Tuple[str, ...]:
        ...
    
    def image_types(self) -> Tuple[str, ...]:
        ...
    
    def __setitem__(self, key: str, value: Any) -> None:
        ...
    
    def __getitem__(self, key: str) -> Any:
        ...
    
    def cget(self, key: str) -> Any:
        ...
    
    def configure(self, cnf: Any = ...) -> Any:
        ...
    


class CallWrapper:
    func: Any
    subst: Any
    widget: Any
    def __init__(self, func, subst, widget) -> None:
        ...
    
    def __call__(self, *args):
        ...
    


class XView:
    def xview(self, *args):
        ...
    
    def xview_moveto(self, fraction):
        ...
    
    def xview_scroll(self, number, what):
        ...
    


class YView:
    def yview(self, *args):
        ...
    
    def yview_moveto(self, fraction):
        ...
    
    def yview_scroll(self, number, what):
        ...
    


class Wm:
    @overload
    def wm_aspect(self, minNumer: int, minDenom: int, maxNumer: int, maxDenom: int) -> None:
        ...
    
    @overload
    def wm_aspect(self, minNumer: None = ..., minDenom: None = ..., maxNumer: None = ..., maxDenom: None = ...) -> Optional[Tuple[int, int, int, int]]:
        ...
    
    aspect = ...
    @overload
    def wm_attributes(self) -> Tuple[Any, ...]:
        ...
    
    @overload
    def wm_attributes(self, __option: str) -> Any:
        ...
    
    @overload
    def wm_attributes(self, __option: str, __value: Any, *__other_option_value_pairs: Any) -> None:
        ...
    
    attributes = ...
    def wm_client(self, name: Optional[str] = ...) -> str:
        ...
    
    client = ...
    @overload
    def wm_colormapwindows(self) -> List[Misc]:
        ...
    
    @overload
    def wm_colormapwindows(self, __wlist: _TkinterSequence[Misc]) -> None:
        ...
    
    @overload
    def wm_colormapwindows(self, __first_wlist_item: Misc, *other_wlist_items: Misc) -> None:
        ...
    
    colormapwindows = ...
    def wm_command(self, value: Optional[str] = ...) -> str:
        ...
    
    command = ...
    def wm_deiconify(self) -> None:
        ...
    
    deiconify = ...
    def wm_focusmodel(self, model: Optional[Any] = ...):
        ...
    
    focusmodel = ...
    def wm_forget(self, window: Wm) -> None:
        ...
    
    forget = ...
    def wm_frame(self):
        ...
    
    frame = ...
    @overload
    def wm_geometry(self, newGeometry: None = ...) -> str:
        ...
    
    @overload
    def wm_geometry(self, newGeometry: str) -> None:
        ...
    
    geometry = ...
    def wm_grid(self, baseWidth: Optional[Any] = ..., baseHeight: Optional[Any] = ..., widthInc: Optional[Any] = ..., heightInc: Optional[Any] = ...):
        ...
    
    grid = ...
    def wm_group(self, pathName: Optional[Any] = ...):
        ...
    
    group = ...
    def wm_iconbitmap(self, bitmap: Optional[Any] = ..., default: Optional[Any] = ...):
        ...
    
    iconbitmap = ...
    def wm_iconify(self) -> None:
        ...
    
    iconify = ...
    def wm_iconmask(self, bitmap: Optional[Any] = ...):
        ...
    
    iconmask = ...
    def wm_iconname(self, newName: Optional[Any] = ...):
        ...
    
    iconname = ...
    def wm_iconphoto(self, default: bool, __image1: Image, *args: Image) -> None:
        ...
    
    iconphoto = ...
    def wm_iconposition(self, x: Optional[Any] = ..., y: Optional[Any] = ...):
        ...
    
    iconposition = ...
    def wm_iconwindow(self, pathName: Optional[Any] = ...):
        ...
    
    iconwindow = ...
    def wm_manage(self, widget):
        ...
    
    manage = ...
    @overload
    def wm_maxsize(self, width: None = ..., height: None = ...) -> Tuple[int, int]:
        ...
    
    @overload
    def wm_maxsize(self, width: int, height: int) -> None:
        ...
    
    maxsize = ...
    @overload
    def wm_minsize(self, width: None = ..., height: None = ...) -> Tuple[int, int]:
        ...
    
    @overload
    def wm_minsize(self, width: int, height: int) -> None:
        ...
    
    minsize = ...
    @overload
    def wm_overrideredirect(self, boolean: None = ...) -> Optional[bool]:
        ...
    
    @overload
    def wm_overrideredirect(self, boolean: bool) -> None:
        ...
    
    overrideredirect = ...
    def wm_positionfrom(self, who: Optional[Any] = ...):
        ...
    
    positionfrom = ...
    @overload
    def wm_protocol(self, name: str, func: Union[Callable[[], Any], str]) -> None:
        ...
    
    @overload
    def wm_protocol(self, name: str, func: None = ...) -> str:
        ...
    
    @overload
    def wm_protocol(self, name: None = ..., func: None = ...) -> Tuple[str, ...]:
        ...
    
    protocol = ...
    @overload
    def wm_resizable(self, width: None = ..., height: None = ...) -> Tuple[bool, bool]:
        ...
    
    @overload
    def wm_resizable(self, width: bool, height: bool) -> None:
        ...
    
    resizable = ...
    def wm_sizefrom(self, who: Optional[Any] = ...):
        ...
    
    sizefrom = ...
    @overload
    def wm_state(self, newstate: None = ...) -> str:
        ...
    
    @overload
    def wm_state(self, newstate: str) -> None:
        ...
    
    state = ...
    @overload
    def wm_title(self, string: None = ...) -> str:
        ...
    
    @overload
    def wm_title(self, string: str) -> None:
        ...
    
    title = ...
    @overload
    def wm_transient(self, master: None = ...) -> _tkinter.Tcl_Obj:
        ...
    
    @overload
    def wm_transient(self, master: Union[Wm, _tkinter.Tcl_Obj]) -> None:
        ...
    
    transient = ...
    def wm_withdraw(self) -> None:
        ...
    
    withdraw = ...


class _ExceptionReportingCallback(Protocol):
    def __call__(self, __exc: Type[BaseException], __val: BaseException, __tb: TracebackType) -> Any:
        ...
    


class Tk(Misc, Wm):
    master: None
    def __init__(self, screenName: Optional[str] = ..., baseName: Optional[str] = ..., className: str = ..., useTk: bool = ..., sync: bool = ..., use: Optional[str] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., menu: Menu = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def loadtk(self) -> None:
        ...
    
    def destroy(self) -> None:
        ...
    
    def readprofile(self, baseName: str, className: str) -> None:
        ...
    
    report_callback_exception: _ExceptionReportingCallback
    call: Callable[..., Any]
    def eval(self, __code: str) -> str:
        ...
    
    adderrorinfo: Any
    createcommand: Any
    createfilehandler: Any
    createtimerhandler: Any
    deletecommand: Any
    deletefilehandler: Any
    dooneevent: Any
    evalfile: Any
    exprboolean: Any
    exprdouble: Any
    exprlong: Any
    exprstring: Any
    getboolean: Any
    getdouble: Any
    getint: Any
    getvar: Any
    globalgetvar: Any
    globalsetvar: Any
    globalunsetvar: Any
    interpaddr: Any
    mainloop: Any
    quit: Any
    record: Any
    setvar: Any
    split: Any
    splitlist: Any
    unsetvar: Any
    wantobjects: Any
    willdispatch: Any


def Tcl(screenName: Optional[Any] = ..., baseName: Optional[Any] = ..., className: str = ..., useTk: bool = ...):
    ...

_InMiscTotal = TypedDict("_InMiscTotal", { "in": Misc })
_InMiscNonTotal = TypedDict("_InMiscNonTotal", { "in": Misc }, total=False)
class _PackInfo(_InMiscTotal):
    anchor: _Anchor
    expand: bool
    fill: Literal["none", "x", "y", "both"]
    side: Literal["left", "right", "top", "bottom"]
    ipadx: int
    ipady: int
    padx: Union[int, Tuple[int, int]]
    pady: Union[int, Tuple[int, int]]
    ...


class Pack:
    def pack_configure(self, cnf: Optional[Mapping[str, Any]] = ..., *, after: Misc = ..., anchor: _Anchor = ..., before: Misc = ..., expand: int = ..., fill: Literal["none", "x", "y", "both"] = ..., side: Literal["left", "right", "top", "bottom"] = ..., ipadx: _ScreenUnits = ..., ipady: _ScreenUnits = ..., padx: Union[_ScreenUnits, Tuple[_ScreenUnits, _ScreenUnits]] = ..., pady: Union[_ScreenUnits, Tuple[_ScreenUnits, _ScreenUnits]] = ..., in_: Misc = ..., **kw: Any) -> None:
        ...
    
    def pack_forget(self) -> None:
        ...
    
    def pack_info(self) -> _PackInfo:
        ...
    
    pack = ...
    forget = ...
    propagate = ...


class _PlaceInfo(_InMiscNonTotal):
    anchor: _Anchor
    bordermode: Literal["inside", "outside", "ignore"]
    width: str
    height: str
    x: str
    y: str
    relheight: str
    relwidth: str
    relx: str
    rely: str
    ...


class Place:
    def place_configure(self, cnf: Optional[Mapping[str, Any]] = ..., *, anchor: _Anchor = ..., bordermode: Literal["inside", "outside", "ignore"] = ..., width: _ScreenUnits = ..., height: _ScreenUnits = ..., x: _ScreenUnits = ..., y: _ScreenUnits = ..., relheight: Union[str, float] = ..., relwidth: Union[str, float] = ..., relx: Union[str, float] = ..., rely: Union[str, float] = ..., in_: Misc = ..., **kw: Any) -> None:
        ...
    
    def place_forget(self) -> None:
        ...
    
    def place_info(self) -> _PlaceInfo:
        ...
    
    place = ...
    info = ...


class _GridInfo(_InMiscNonTotal):
    column: int
    columnspan: int
    row: int
    rowspan: int
    ipadx: int
    ipady: int
    padx: Union[int, Tuple[int, int]]
    pady: Union[int, Tuple[int, int]]
    sticky: str
    ...


class Grid:
    def grid_configure(self, cnf: Optional[Mapping[str, Any]] = ..., *, column: int = ..., columnspan: int = ..., row: int = ..., rowspan: int = ..., ipadx: _ScreenUnits = ..., ipady: _ScreenUnits = ..., padx: Union[_ScreenUnits, Tuple[_ScreenUnits, _ScreenUnits]] = ..., pady: Union[_ScreenUnits, Tuple[_ScreenUnits, _ScreenUnits]] = ..., sticky: str = ..., in_: Misc = ..., **kw: Any) -> None:
        ...
    
    def grid_forget(self) -> None:
        ...
    
    def grid_remove(self) -> None:
        ...
    
    def grid_info(self) -> _GridInfo:
        ...
    
    grid = ...
    location = ...
    size = ...


class BaseWidget(Misc):
    master: Misc
    widgetName: Any
    def __init__(self, master, widgetName, cnf=..., kw=..., extra=...) -> None:
        ...
    
    def destroy(self) -> None:
        ...
    


class Widget(BaseWidget, Pack, Place, Grid):
    @overload
    def bind(self: _W, sequence: Optional[str] = ..., func: Optional[Callable[[Event[_W]], Any]] = ..., add: Optional[bool] = ...) -> str:
        ...
    
    @overload
    def bind(self, sequence: Optional[str], func: str, add: Optional[bool] = ...) -> None:
        ...
    
    @overload
    def bind(self, *, func: str, add: Optional[bool] = ...) -> None:
        ...
    


class Toplevel(BaseWidget, Wm):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., class_: str = ..., colormap: Union[Literal["new", ""], Misc] = ..., container: bool = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., menu: Menu = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., screen: str = ..., takefocus: _TakeFocusValue = ..., use: int = ..., visual: Union[str, Tuple[str, int]] = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., menu: Menu = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Button(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., default: Literal["normal", "active", "disabled"] = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., overrelief: _Relief = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., default: Literal["normal", "active", "disabled"] = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., overrelief: _Relief = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def flash(self):
        ...
    
    def invoke(self):
        ...
    


class Canvas(Widget, XView, YView):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., closeenough: float = ..., confine: bool = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., insertbackground: _Color = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., name: str = ..., offset: Any = ..., relief: _Relief = ..., scrollregion: Union[Tuple[_ScreenUnits, _ScreenUnits, _ScreenUnits, _ScreenUnits], Tuple[()]] = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., state: Literal["normal", "disabled"] = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ..., xscrollcommand: _XYScrollCommand = ..., xscrollincrement: _ScreenUnits = ..., yscrollcommand: _XYScrollCommand = ..., yscrollincrement: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., closeenough: float = ..., confine: bool = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., insertbackground: _Color = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., offset: Any = ..., relief: _Relief = ..., scrollregion: Union[Tuple[_ScreenUnits, _ScreenUnits, _ScreenUnits, _ScreenUnits], Tuple[()]] = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., state: Literal["normal", "disabled"] = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ..., xscrollcommand: _XYScrollCommand = ..., xscrollincrement: _ScreenUnits = ..., yscrollcommand: _XYScrollCommand = ..., yscrollincrement: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def addtag(self, *args):
        ...
    
    def addtag_above(self, newtag, tagOrId):
        ...
    
    def addtag_all(self, newtag):
        ...
    
    def addtag_below(self, newtag, tagOrId):
        ...
    
    def addtag_closest(self, newtag, x, y, halo: Optional[Any] = ..., start: Optional[Any] = ...):
        ...
    
    def addtag_enclosed(self, newtag, x1, y1, x2, y2):
        ...
    
    def addtag_overlapping(self, newtag, x1, y1, x2, y2):
        ...
    
    def addtag_withtag(self, newtag, tagOrId):
        ...
    
    def bbox(self, *args):
        ...
    
    @overload
    def tag_bind(self, tagOrId: Union[str, int], sequence: Optional[str] = ..., func: Optional[Callable[[Event[Canvas]], Any]] = ..., add: Optional[bool] = ...) -> str:
        ...
    
    @overload
    def tag_bind(self, tagOrId: Union[str, int], sequence: Optional[str], func: str, add: Optional[bool] = ...) -> None:
        ...
    
    @overload
    def tag_bind(self, tagOrId: Union[str, int], *, func: str, add: Optional[bool] = ...) -> None:
        ...
    
    def tag_unbind(self, tagOrId: Union[str, int], sequence: str, funcid: Optional[str] = ...) -> None:
        ...
    
    def canvasx(self, screenx, gridspacing: Optional[Any] = ...):
        ...
    
    def canvasy(self, screeny, gridspacing: Optional[Any] = ...):
        ...
    
    def coords(self, *args):
        ...
    
    def create_arc(self, *args, **kw) -> _CanvasItemId:
        ...
    
    def create_bitmap(self, *args, **kw) -> _CanvasItemId:
        ...
    
    def create_image(self, *args, **kw) -> _CanvasItemId:
        ...
    
    def create_line(self, __x0: float, __y0: float, __x1: float, __y1: float, *, activedash: _Color = ..., activefill: _Color = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., arrow: Literal["first", "last", "both"] = ..., arrowshape: Tuple[float, float, float] = ..., capstyle: Literal["round", "projecting", "butt"] = ..., dash: Union[Tuple[float], Tuple[float, float], Tuple[float, float, float, float]] = ..., dashoffset: _ScreenUnits = ..., disableddash: _Color = ..., disabledfill: _Color = ..., disabledstipple: _Bitmap = ..., disabledwidth: _ScreenUnits = ..., fill: _Color = ..., joinstyle: Literal["round", "bevel", "miter"] = ..., offset: _ScreenUnits = ..., smooth: bool = ..., splinesteps: float = ..., state: Literal["normal", "active", "disabled"] = ..., stipple: _Bitmap = ..., tags: Union[str, Tuple[str, ...]] = ..., width: _ScreenUnits = ...) -> _CanvasItemId:
        ...
    
    def create_oval(self, __x0: float, __y0: float, __x1: float, __y1: float, *, activedash: _Color = ..., activefill: _Color = ..., activeoutline: _Color = ..., activeoutlinestipple: _Color = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: Union[Tuple[float], Tuple[float, float], Tuple[float, float, float, float]] = ..., dashoffset: _ScreenUnits = ..., disableddash: _Color = ..., disabledfill: _Color = ..., disabledoutline: _Color = ..., disabledoutlinestipple: _Color = ..., disabledstipple: _Bitmap = ..., disabledwidth: _ScreenUnits = ..., fill: _Color = ..., offset: _ScreenUnits = ..., outline: _Color = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: _Bitmap = ..., state: Literal["normal", "active", "disabled"] = ..., stipple: _Bitmap = ..., tags: Union[str, Tuple[str, ...]] = ..., width: _ScreenUnits = ...) -> _CanvasItemId:
        ...
    
    def create_polygon(self, __x0: float, __y0: float, __x1: float, __y1: float, *xy_pairs: float, activedash: _Color = ..., activefill: _Color = ..., activeoutline: _Color = ..., activeoutlinestipple: _Color = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: Union[Tuple[float], Tuple[float, float], Tuple[float, float, float, float]] = ..., dashoffset: _ScreenUnits = ..., disableddash: _Color = ..., disabledfill: _Color = ..., disabledoutline: _Color = ..., disabledoutlinestipple: _Color = ..., disabledstipple: _Bitmap = ..., disabledwidth: _ScreenUnits = ..., fill: _Color = ..., joinstyle: Literal["round", "bevel", "miter"] = ..., offset: _ScreenUnits = ..., outline: _Color = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: _Bitmap = ..., smooth: bool = ..., splinesteps: float = ..., state: Literal["normal", "active", "disabled"] = ..., stipple: _Bitmap = ..., tags: Union[str, Tuple[str, ...]] = ..., width: _ScreenUnits = ...) -> _CanvasItemId:
        ...
    
    def create_rectangle(self, __x0: float, __y0: float, __x1: float, __y1: float, *, activedash: _Color = ..., activefill: _Color = ..., activeoutline: _Color = ..., activeoutlinestipple: _Color = ..., activestipple: str = ..., activewidth: _ScreenUnits = ..., dash: Union[Tuple[float], Tuple[float, float], Tuple[float, float, float, float]] = ..., dashoffset: _ScreenUnits = ..., disableddash: _Color = ..., disabledfill: _Color = ..., disabledoutline: _Color = ..., disabledoutlinestipple: _Color = ..., disabledstipple: _Bitmap = ..., disabledwidth: _ScreenUnits = ..., fill: _Color = ..., offset: _ScreenUnits = ..., outline: _Color = ..., outlineoffset: _ScreenUnits = ..., outlinestipple: _Bitmap = ..., state: Literal["normal", "active", "disabled"] = ..., stipple: _Bitmap = ..., tags: Union[str, Tuple[str, ...]] = ..., width: _ScreenUnits = ...) -> _CanvasItemId:
        ...
    
    def create_text(self, __x: float, __y: float, *, activefill: _Color = ..., activestipple: str = ..., anchor: _Anchor = ..., disabledfill: _Color = ..., disabledstipple: _Bitmap = ..., fill: _Color = ..., font: _FontDescription = ..., justify: Literal["left", "center", "right"] = ..., offset: _ScreenUnits = ..., state: Literal["normal", "active", "disabled"] = ..., stipple: _Bitmap = ..., tags: Union[str, Tuple[str, ...]] = ..., text: Union[float, str] = ..., width: _ScreenUnits = ...) -> _CanvasItemId:
        ...
    
    def create_window(self, __x: float, __y: float, *, anchor: _Anchor = ..., height: _ScreenUnits = ..., state: Literal["normal", "active", "disabled"] = ..., tags: Union[str, Tuple[str, ...]] = ..., width: _ScreenUnits = ..., window: Widget = ...) -> _CanvasItemId:
        ...
    
    def dchars(self, *args):
        ...
    
    def delete(self, *tagsOrCanvasIds: Union[str, _CanvasItemId]) -> None:
        ...
    
    def dtag(self, *args):
        ...
    
    def find(self, *args):
        ...
    
    def find_above(self, tagOrId: Union[str, _CanvasItemId]):
        ...
    
    def find_all(self):
        ...
    
    def find_below(self, tagOrId: Union[str, _CanvasItemId]):
        ...
    
    def find_closest(self, x, y, halo: Optional[Any] = ..., start: Optional[Any] = ...):
        ...
    
    def find_enclosed(self, x1, y1, x2, y2):
        ...
    
    def find_overlapping(self, x1, y1, x2, y2):
        ...
    
    def find_withtag(self, tagOrId: Union[str, _CanvasItemId]):
        ...
    
    def focus(self, *args):
        ...
    
    def gettags(self, *args):
        ...
    
    def icursor(self, *args):
        ...
    
    def index(self, *args):
        ...
    
    def insert(self, *args):
        ...
    
    def itemcget(self, tagOrId, option):
        ...
    
    def itemconfigure(self, tagOrId, cnf: Optional[Any] = ..., **kw):
        ...
    
    itemconfig: Any
    def tag_lower(self, *args):
        ...
    
    lower: Any
    def move(self, *args):
        ...
    
    if sys.version_info >= (3, 8):
        def moveto(self, tagOrId: Union[str, _CanvasItemId], x: Union[Literal[""], float] = ..., y: Union[Literal[""], float] = ...) -> None:
            ...
        
    def postscript(self, cnf=..., **kw):
        ...
    
    def tag_raise(self, *args):
        ...
    
    lift: Any
    def scale(self, *args):
        ...
    
    def scan_mark(self, x, y):
        ...
    
    def scan_dragto(self, x, y, gain: int = ...):
        ...
    
    def select_adjust(self, tagOrId, index):
        ...
    
    def select_clear(self):
        ...
    
    def select_from(self, tagOrId, index):
        ...
    
    def select_item(self):
        ...
    
    def select_to(self, tagOrId, index):
        ...
    
    def type(self, tagOrId):
        ...
    


class Checkbutton(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., offrelief: _Relief = ..., offvalue: Any = ..., onvalue: Any = ..., overrelief: _Relief = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectcolor: _Color = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., tristateimage: _ImageSpec = ..., tristatevalue: Any = ..., underline: int = ..., variable: Union[Variable, Literal[""]] = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., offrelief: _Relief = ..., offvalue: Any = ..., onvalue: Any = ..., overrelief: _Relief = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectcolor: _Color = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., tristateimage: _ImageSpec = ..., tristatevalue: Any = ..., underline: int = ..., variable: Union[Variable, Literal[""]] = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def deselect(self):
        ...
    
    def flash(self):
        ...
    
    def invoke(self):
        ...
    
    def select(self):
        ...
    
    def toggle(self):
        ...
    


class Entry(Widget, XView):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledbackground: _Color = ..., disabledforeground: _Color = ..., exportselection: bool = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., insertbackground: _Color = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., invalidcommand: _EntryValidateCommand = ..., invcmd: _EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., readonlybackground: _Color = ..., relief: _Relief = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., show: str = ..., state: Literal["normal", "disabled", "readonly"] = ..., takefocus: _TakeFocusValue = ..., textvariable: Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: _EntryValidateCommand = ..., vcmd: _EntryValidateCommand = ..., width: int = ..., xscrollcommand: _XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledbackground: _Color = ..., disabledforeground: _Color = ..., exportselection: bool = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., insertbackground: _Color = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., invalidcommand: _EntryValidateCommand = ..., invcmd: _EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., readonlybackground: _Color = ..., relief: _Relief = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., show: str = ..., state: Literal["normal", "disabled", "readonly"] = ..., takefocus: _TakeFocusValue = ..., textvariable: Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: _EntryValidateCommand = ..., vcmd: _EntryValidateCommand = ..., width: int = ..., xscrollcommand: _XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def delete(self, first, last: Optional[Any] = ...):
        ...
    
    def get(self):
        ...
    
    def icursor(self, index):
        ...
    
    def index(self, index):
        ...
    
    def insert(self, index, string):
        ...
    
    def scan_mark(self, x):
        ...
    
    def scan_dragto(self, x):
        ...
    
    def selection_adjust(self, index):
        ...
    
    select_adjust: Any
    def selection_clear(self):
        ...
    
    select_clear: Any
    def selection_from(self, index):
        ...
    
    select_from: Any
    def selection_present(self):
        ...
    
    select_present: Any
    def selection_range(self, start, end):
        ...
    
    select_range: Any
    def selection_to(self, index):
        ...
    
    select_to: Any


class Frame(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., class_: str = ..., colormap: Union[Literal["new", ""], Misc] = ..., container: bool = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., visual: Union[str, Tuple[str, int]] = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., width: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Label(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Listbox(Widget, XView, YView):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activestyle: Literal["dotbox", "none", "underline"] = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., exportselection: int = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: int = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., justify: Literal["left", "center", "right"] = ..., listvariable: Variable = ..., name: str = ..., relief: _Relief = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., selectmode: str = ..., setgrid: bool = ..., state: Literal["normal", "disabled"] = ..., takefocus: _TakeFocusValue = ..., width: int = ..., xscrollcommand: _XYScrollCommand = ..., yscrollcommand: _XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activestyle: Literal["dotbox", "none", "underline"] = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., exportselection: bool = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: int = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., justify: Literal["left", "center", "right"] = ..., listvariable: Variable = ..., relief: _Relief = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., selectmode: str = ..., setgrid: bool = ..., state: Literal["normal", "disabled"] = ..., takefocus: _TakeFocusValue = ..., width: int = ..., xscrollcommand: _XYScrollCommand = ..., yscrollcommand: _XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def activate(self, index):
        ...
    
    def bbox(self, index):
        ...
    
    def curselection(self):
        ...
    
    def delete(self, first, last: Optional[Any] = ...):
        ...
    
    def get(self, first, last: Optional[Any] = ...):
        ...
    
    def index(self, index):
        ...
    
    def insert(self, index, *elements):
        ...
    
    def nearest(self, y):
        ...
    
    def scan_mark(self, x, y):
        ...
    
    def scan_dragto(self, x, y):
        ...
    
    def see(self, index):
        ...
    
    def selection_anchor(self, index):
        ...
    
    select_anchor: Any
    def selection_clear(self, first, last: Optional[Any] = ...):
        ...
    
    select_clear: Any
    def selection_includes(self, index):
        ...
    
    select_includes: Any
    def selection_set(self, first, last: Optional[Any] = ...):
        ...
    
    select_set: Any
    def size(self):
        ...
    
    def itemcget(self, index, option):
        ...
    
    def itemconfigure(self, index, cnf: Optional[Any] = ..., **kw):
        ...
    
    itemconfig: Any


_MenuIndex = Union[str, int]
class Menu(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeborderwidth: _ScreenUnits = ..., activeforeground: _Color = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., name: str = ..., postcommand: Union[Callable[[], Any], str] = ..., relief: _Relief = ..., selectcolor: _Color = ..., takefocus: _TakeFocusValue = ..., tearoff: int = ..., tearoffcommand: Union[Callable[[str, str], Any], str] = ..., title: str = ..., type: Literal["menubar", "tearoff", "normal"] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeborderwidth: _ScreenUnits = ..., activeforeground: _Color = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., postcommand: Union[Callable[[], Any], str] = ..., relief: _Relief = ..., selectcolor: _Color = ..., takefocus: _TakeFocusValue = ..., tearoff: bool = ..., tearoffcommand: Union[Callable[[str, str], Any], str] = ..., title: str = ..., type: Literal["menubar", "tearoff", "normal"] = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def tk_popup(self, x: int, y: int, entry: _MenuIndex = ...):
        ...
    
    def activate(self, index):
        ...
    
    def add(self, itemType, cnf=..., **kw):
        ...
    
    def insert(self, index, itemType, cnf=..., **kw):
        ...
    
    def add_cascade(self, cnf: Optional[Dict[str, Any]] = ..., *, accelerator: str = ..., activebackground: _Color = ..., activeforeground: _Color = ..., background: _Color = ..., bitmap: _Bitmap = ..., columnbreak: int = ..., command: Union[Callable[[], Any], str] = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: _Color = ..., hidemargin: bool = ..., image: _ImageSpec = ..., label: str = ..., menu: Menu = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ...) -> None:
        ...
    
    def add_checkbutton(self, cnf: Optional[Dict[str, Any]] = ..., *, accelerator: str = ..., activebackground: _Color = ..., activeforeground: _Color = ..., background: _Color = ..., bitmap: _Bitmap = ..., columnbreak: int = ..., command: Union[Callable[[], Any], str] = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: _Color = ..., hidemargin: bool = ..., image: _ImageSpec = ..., indicatoron: bool = ..., label: str = ..., offvalue: Any = ..., onvalue: Any = ..., selectcolor: _Color = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ..., variable: Variable = ...) -> None:
        ...
    
    def add_command(self, cnf: Optional[Dict[str, Any]] = ..., *, accelerator: str = ..., activebackground: _Color = ..., activeforeground: _Color = ..., background: _Color = ..., bitmap: _Bitmap = ..., columnbreak: int = ..., command: Union[Callable[[], Any], str] = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: _Color = ..., hidemargin: bool = ..., image: _ImageSpec = ..., label: str = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ...) -> None:
        ...
    
    def add_radiobutton(self, cnf: Optional[Dict[str, Any]] = ..., *, accelerator: str = ..., activebackground: _Color = ..., activeforeground: _Color = ..., background: _Color = ..., bitmap: _Bitmap = ..., columnbreak: int = ..., command: Union[Callable[[], Any], str] = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: _Color = ..., hidemargin: bool = ..., image: _ImageSpec = ..., indicatoron: bool = ..., label: str = ..., selectcolor: _Color = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ..., value: Any = ..., variable: Variable = ...) -> None:
        ...
    
    def add_separator(self, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ...) -> None:
        ...
    
    def insert_cascade(self, index: _MenuIndex, cnf: Optional[Dict[str, Any]] = ..., *, accelerator: str = ..., activebackground: _Color = ..., activeforeground: _Color = ..., background: _Color = ..., bitmap: _Bitmap = ..., columnbreak: int = ..., command: Union[Callable[[], Any], str] = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: _Color = ..., hidemargin: bool = ..., image: _ImageSpec = ..., label: str = ..., menu: Menu = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ...) -> None:
        ...
    
    def insert_checkbutton(self, index: _MenuIndex, cnf: Optional[Dict[str, Any]] = ..., *, accelerator: str = ..., activebackground: _Color = ..., activeforeground: _Color = ..., background: _Color = ..., bitmap: _Bitmap = ..., columnbreak: int = ..., command: Union[Callable[[], Any], str] = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: _Color = ..., hidemargin: bool = ..., image: _ImageSpec = ..., indicatoron: bool = ..., label: str = ..., offvalue: Any = ..., onvalue: Any = ..., selectcolor: _Color = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ..., variable: Variable = ...) -> None:
        ...
    
    def insert_command(self, index: _MenuIndex, cnf: Optional[Dict[str, Any]] = ..., *, accelerator: str = ..., activebackground: _Color = ..., activeforeground: _Color = ..., background: _Color = ..., bitmap: _Bitmap = ..., columnbreak: int = ..., command: Union[Callable[[], Any], str] = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: _Color = ..., hidemargin: bool = ..., image: _ImageSpec = ..., label: str = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ...) -> None:
        ...
    
    def insert_radiobutton(self, index: _MenuIndex, cnf: Optional[Dict[str, Any]] = ..., *, accelerator: str = ..., activebackground: _Color = ..., activeforeground: _Color = ..., background: _Color = ..., bitmap: _Bitmap = ..., columnbreak: int = ..., command: Union[Callable[[], Any], str] = ..., compound: _Compound = ..., font: _FontDescription = ..., foreground: _Color = ..., hidemargin: bool = ..., image: _ImageSpec = ..., indicatoron: bool = ..., label: str = ..., selectcolor: _Color = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., underline: int = ..., value: Any = ..., variable: Variable = ...) -> None:
        ...
    
    def insert_separator(self, index: _MenuIndex, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ...) -> None:
        ...
    
    def delete(self, index1, index2: Optional[Any] = ...):
        ...
    
    def entrycget(self, index, option):
        ...
    
    def entryconfigure(self, index, cnf: Optional[Any] = ..., **kw):
        ...
    
    entryconfig: Any
    def index(self, index):
        ...
    
    def invoke(self, index):
        ...
    
    def post(self, x, y):
        ...
    
    def type(self, index):
        ...
    
    def unpost(self):
        ...
    
    def xposition(self, index):
        ...
    
    def yposition(self, index):
        ...
    


class Menubutton(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., compound: _Compound = ..., cursor: _Cursor = ..., direction: Literal["above", "below", "left", "right", "flush"] = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., menu: Menu = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., compound: _Compound = ..., cursor: _Cursor = ..., direction: Literal["above", "below", "left", "right", "flush"] = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., menu: Menu = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., underline: int = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Message(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, anchor: _Anchor = ..., aspect: int = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, anchor: _Anchor = ..., aspect: int = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., justify: Literal["left", "center", "right"] = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., width: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Radiobutton(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., offrelief: _Relief = ..., overrelief: _Relief = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectcolor: _Color = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., tristateimage: _ImageSpec = ..., tristatevalue: Any = ..., underline: int = ..., value: Any = ..., variable: Union[Variable, Literal[""]] = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activeforeground: _Color = ..., anchor: _Anchor = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bitmap: _Bitmap = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: _ButtonCommand = ..., compound: _Compound = ..., cursor: _Cursor = ..., disabledforeground: _Color = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., image: _ImageSpec = ..., indicatoron: bool = ..., justify: Literal["left", "center", "right"] = ..., offrelief: _Relief = ..., overrelief: _Relief = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectcolor: _Color = ..., selectimage: _ImageSpec = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: Variable = ..., tristateimage: _ImageSpec = ..., tristatevalue: Any = ..., underline: int = ..., value: Any = ..., variable: Union[Variable, Literal[""]] = ..., width: _ScreenUnits = ..., wraplength: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def deselect(self):
        ...
    
    def flash(self):
        ...
    
    def invoke(self):
        ...
    
    def select(self):
        ...
    


class Scale(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bigincrement: float = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: Union[str, Callable[[str], Any]] = ..., cursor: _Cursor = ..., digits: int = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., from_: float = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., label: str = ..., length: _ScreenUnits = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., resolution: float = ..., showvalue: bool = ..., sliderlength: _ScreenUnits = ..., sliderrelief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., tickinterval: float = ..., to: float = ..., troughcolor: _Color = ..., variable: Union[IntVar, DoubleVar] = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., bigincrement: float = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: Union[str, Callable[[str], Any]] = ..., cursor: _Cursor = ..., digits: int = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., from_: float = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., label: str = ..., length: _ScreenUnits = ..., orient: Literal["horizontal", "vertical"] = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., resolution: float = ..., showvalue: bool = ..., sliderlength: _ScreenUnits = ..., sliderrelief: _Relief = ..., state: Literal["normal", "active", "disabled"] = ..., takefocus: _TakeFocusValue = ..., tickinterval: float = ..., to: float = ..., troughcolor: _Color = ..., variable: Union[IntVar, DoubleVar] = ..., width: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def get(self):
        ...
    
    def set(self, value):
        ...
    
    def coords(self, value: Optional[Any] = ...):
        ...
    
    def identify(self, x, y):
        ...
    


class Scrollbar(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activerelief: _Relief = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: Union[Callable[..., Optional[Tuple[float, float]]], str] = ..., cursor: _Cursor = ..., elementborderwidth: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., jump: bool = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., takefocus: _TakeFocusValue = ..., troughcolor: _Color = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., activerelief: _Relief = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., command: Union[Callable[..., Optional[Tuple[float, float]]], str] = ..., cursor: _Cursor = ..., elementborderwidth: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., jump: bool = ..., orient: Literal["horizontal", "vertical"] = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., takefocus: _TakeFocusValue = ..., troughcolor: _Color = ..., width: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def activate(self, index: Optional[Any] = ...):
        ...
    
    def delta(self, deltax, deltay):
        ...
    
    def fraction(self, x, y):
        ...
    
    def identify(self, x, y):
        ...
    
    def get(self):
        ...
    
    def set(self, first, last):
        ...
    


_TextIndex = Union[_tkinter.Tcl_Obj, str, float, Misc]
class Text(Widget, XView, YView):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, autoseparators: bool = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., blockcursor: bool = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., endline: Union[int, Literal[""]] = ..., exportselection: bool = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., inactiveselectbackground: _Color = ..., insertbackground: _Color = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertunfocussed: Literal["none", "hollow", "solid"] = ..., insertwidth: _ScreenUnits = ..., maxundo: int = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., setgrid: bool = ..., spacing1: _ScreenUnits = ..., spacing2: _ScreenUnits = ..., spacing3: _ScreenUnits = ..., startline: Union[int, Literal[""]] = ..., state: Literal["normal", "disabled"] = ..., tabs: Union[_ScreenUnits, str, Tuple[Union[_ScreenUnits, str], ...]] = ..., tabstyle: Literal["tabular", "wordprocessor"] = ..., takefocus: _TakeFocusValue = ..., undo: bool = ..., width: int = ..., wrap: Literal["none", "char", "word"] = ..., xscrollcommand: _XYScrollCommand = ..., yscrollcommand: _XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, autoseparators: bool = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., blockcursor: bool = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., endline: Union[int, Literal[""]] = ..., exportselection: bool = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., inactiveselectbackground: _Color = ..., insertbackground: _Color = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertunfocussed: Literal["none", "hollow", "solid"] = ..., insertwidth: _ScreenUnits = ..., maxundo: int = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., setgrid: bool = ..., spacing1: _ScreenUnits = ..., spacing2: _ScreenUnits = ..., spacing3: _ScreenUnits = ..., startline: Union[int, Literal[""]] = ..., state: Literal["normal", "disabled"] = ..., tabs: Union[_ScreenUnits, str, Tuple[Union[_ScreenUnits, str], ...]] = ..., tabstyle: Literal["tabular", "wordprocessor"] = ..., takefocus: _TakeFocusValue = ..., undo: bool = ..., width: int = ..., wrap: Literal["none", "char", "word"] = ..., xscrollcommand: _XYScrollCommand = ..., yscrollcommand: _XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def bbox(self, index: _TextIndex) -> Optional[Tuple[int, int, int, int]]:
        ...
    
    def compare(self, index1: _TextIndex, op: Literal["<", "<=", "==", ">=", ">", "!="], index2: _TextIndex) -> bool:
        ...
    
    def count(self, index1, index2, *args):
        ...
    
    @overload
    def debug(self, boolean: None = ...) -> bool:
        ...
    
    @overload
    def debug(self, boolean: bool) -> None:
        ...
    
    def delete(self, index1: _TextIndex, index2: Optional[_TextIndex] = ...) -> None:
        ...
    
    def dlineinfo(self, index: _TextIndex) -> Optional[Tuple[int, int, int, int, int]]:
        ...
    
    @overload
    def dump(self, index1: _TextIndex, index2: Optional[_TextIndex] = ..., command: None = ..., *, all: bool = ..., image: bool = ..., mark: bool = ..., tag: bool = ..., text: bool = ..., window: bool = ...) -> List[Tuple[str, str, str]]:
        ...
    
    @overload
    def dump(self, index1: _TextIndex, index2: Optional[_TextIndex], command: Union[Callable[[str, str, str], Any], str], *, all: bool = ..., image: bool = ..., mark: bool = ..., tag: bool = ..., text: bool = ..., window: bool = ...) -> None:
        ...
    
    @overload
    def dump(self, index1: _TextIndex, index2: Optional[_TextIndex] = ..., *, command: Union[Callable[[str, str, str], Any], str], all: bool = ..., image: bool = ..., mark: bool = ..., tag: bool = ..., text: bool = ..., window: bool = ...) -> None:
        ...
    
    def edit(self, *args):
        ...
    
    @overload
    def edit_modified(self, arg: None = ...) -> bool:
        ...
    
    @overload
    def edit_modified(self, arg: bool) -> None:
        ...
    
    def edit_redo(self) -> None:
        ...
    
    def edit_reset(self) -> None:
        ...
    
    def edit_separator(self) -> None:
        ...
    
    def edit_undo(self) -> None:
        ...
    
    def get(self, index1: _TextIndex, index2: Optional[_TextIndex] = ...) -> str:
        ...
    
    def image_cget(self, index, option):
        ...
    
    def image_configure(self, index, cnf: Optional[Any] = ..., **kw):
        ...
    
    def image_create(self, index, cnf=..., **kw):
        ...
    
    def image_names(self):
        ...
    
    def index(self, index: _TextIndex) -> str:
        ...
    
    def insert(self, index: _TextIndex, chars: str, *args: Union[str, _TkinterSequence[str]]) -> None:
        ...
    
    @overload
    def mark_gravity(self, markName: str, direction: None = ...) -> Literal["left", "right"]:
        ...
    
    @overload
    def mark_gravity(self, markName: str, direction: Literal["left", "right"]) -> None:
        ...
    
    def mark_names(self) -> Tuple[str, ...]:
        ...
    
    def mark_set(self, markName: str, index: _TextIndex) -> None:
        ...
    
    def mark_unset(self, *markNames: str) -> None:
        ...
    
    def mark_next(self, index: _TextIndex) -> Optional[str]:
        ...
    
    def mark_previous(self, index: _TextIndex) -> Optional[str]:
        ...
    
    def peer_create(self, newPathName: Union[str, Text], cnf: Dict[str, Any] = ..., **kw: Any) -> None:
        ...
    
    def peer_names(self) -> Tuple[_tkinter.Tcl_Obj, ...]:
        ...
    
    def replace(self, index1: _TextIndex, index2: _TextIndex, chars: str, *args: Union[str, _TkinterSequence[str]]) -> None:
        ...
    
    def scan_mark(self, x: int, y: int) -> None:
        ...
    
    def scan_dragto(self, x: int, y: int) -> None:
        ...
    
    def search(self, pattern: str, index: _TextIndex, stopindex: Optional[_TextIndex] = ..., forwards: Optional[bool] = ..., backwards: Optional[bool] = ..., exact: Optional[bool] = ..., regexp: Optional[bool] = ..., nocase: Optional[bool] = ..., count: Optional[Variable] = ..., elide: Optional[bool] = ...) -> str:
        ...
    
    def see(self, index: _TextIndex) -> None:
        ...
    
    def tag_add(self, tagName: str, index1: _TextIndex, *args: _TextIndex) -> None:
        ...
    
    @overload
    def tag_bind(self, tagName: str, sequence: Optional[str], func: Optional[Callable[[Event[Text]], Any]], add: Optional[bool] = ...) -> str:
        ...
    
    @overload
    def tag_bind(self, tagName: str, sequence: Optional[str], func: str, add: Optional[bool] = ...) -> None:
        ...
    
    def tag_unbind(self, tagName: str, sequence: str, funcid: Optional[str] = ...) -> None:
        ...
    
    def tag_cget(self, tagName: str, option: str) -> Any:
        ...
    
    @overload
    def tag_configure(self, tagName: str, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bgstipple: _Bitmap = ..., borderwidth: _ScreenUnits = ..., border: _ScreenUnits = ..., elide: bool = ..., fgstipple: _Bitmap = ..., font: _FontDescription = ..., foreground: _Color = ..., justify: Literal["left", "right", "center"] = ..., lmargin1: _ScreenUnits = ..., lmargin2: _ScreenUnits = ..., lmargincolor: _Color = ..., offset: _ScreenUnits = ..., overstrike: bool = ..., overstrikefg: _Color = ..., relief: _Relief = ..., rmargin: _ScreenUnits = ..., rmargincolor: _Color = ..., selectbackground: _Color = ..., selectforeground: _Color = ..., spacing1: _ScreenUnits = ..., spacing2: _ScreenUnits = ..., spacing3: _ScreenUnits = ..., tabs: Any = ..., tabstyle: Literal["tabular", "wordprocessor"] = ..., underline: bool = ..., underlinefg: _Color = ..., wrap: Literal["none", "char", "word"] = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def tag_configure(self, tagName: str, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    tag_config = ...
    def tag_delete(self, __first_tag_name: str, *tagNames: str) -> None:
        ...
    
    def tag_lower(self, tagName: str, belowThis: Optional[str] = ...) -> None:
        ...
    
    def tag_names(self, index: Optional[_TextIndex] = ...) -> Tuple[str, ...]:
        ...
    
    def tag_nextrange(self, tagName: str, index1: _TextIndex, index2: Optional[_TextIndex] = ...) -> Union[Tuple[str, str], Tuple[()]]:
        ...
    
    def tag_prevrange(self, tagName: str, index1: _TextIndex, index2: Optional[_TextIndex] = ...) -> Union[Tuple[str, str], Tuple[()]]:
        ...
    
    def tag_raise(self, tagName: str, aboveThis: Optional[str] = ...) -> None:
        ...
    
    def tag_ranges(self, tagName: str) -> Tuple[_tkinter.Tcl_Obj, ...]:
        ...
    
    def tag_remove(self, tagName: str, index1: _TextIndex, index2: Optional[_TextIndex] = ...) -> None:
        ...
    
    def window_cget(self, index, option):
        ...
    
    def window_configure(self, index, cnf: Optional[Any] = ..., **kw):
        ...
    
    window_config = ...
    def window_create(self, index, cnf=..., **kw):
        ...
    
    def window_names(self):
        ...
    
    def yview_pickplace(self, *what):
        ...
    


class _setit:
    def __init__(self, var, value, callback: Optional[Any] = ...) -> None:
        ...
    
    def __call__(self, *args):
        ...
    


class OptionMenu(Menubutton):
    widgetName: Any
    menuname: Any
    def __init__(self, master: Optional[Misc], variable: StringVar, value: str, *values: str, command: Optional[Callable[[StringVar], Any]] = ...) -> None:
        ...
    


class _Image(Protocol):
    tk: _tkinter.TkappType
    def height(self) -> int:
        ...
    
    def width(self) -> int:
        ...
    


class Image:
    name: Any
    tk: _tkinter.TkappType
    def __init__(self, imgtype, name: Optional[Any] = ..., cnf=..., master: Optional[Union[Misc, _tkinter.TkappType]] = ..., **kw) -> None:
        ...
    
    def __del__(self):
        ...
    
    def __setitem__(self, key, value):
        ...
    
    def __getitem__(self, key):
        ...
    
    configure: Any
    config: Any
    def height(self) -> int:
        ...
    
    def type(self):
        ...
    
    def width(self) -> int:
        ...
    


class PhotoImage(Image):
    def __init__(self, name: Optional[str] = ..., cnf: Dict[str, Any] = ..., master: Optional[Union[Misc, _tkinter.TkappType]] = ..., *, data: Union[str, bytes] = ..., format: str = ..., file: AnyPath = ..., gamma: float = ..., height: int = ..., palette: Union[int, str] = ..., width: int = ...) -> None:
        ...
    
    def configure(self, *, data: Union[str, bytes] = ..., format: str = ..., file: AnyPath = ..., gamma: float = ..., height: int = ..., palette: Union[int, str] = ..., width: int = ...) -> None:
        ...
    
    config = configure
    def blank(self) -> None:
        ...
    
    def cget(self, option: str) -> str:
        ...
    
    def __getitem__(self, key: str) -> str:
        ...
    
    def copy(self) -> PhotoImage:
        ...
    
    def zoom(self, x: int, y: Union[int, Literal[""]] = ...) -> PhotoImage:
        ...
    
    def subsample(self, x: int, y: Union[int, Literal[""]] = ...) -> PhotoImage:
        ...
    
    def get(self, x: int, y: int) -> Tuple[int, int, int]:
        ...
    
    def put(self, data: Union[str, _TkinterSequence[str], _TkinterSequence2D[_Color]], to: Optional[Tuple[int, int]] = ...) -> None:
        ...
    
    def write(self, filename: AnyPath, format: Optional[str] = ..., from_coords: Optional[Tuple[int, int]] = ...) -> None:
        ...
    
    if sys.version_info >= (3, 8):
        def transparency_get(self, x: int, y: int) -> bool:
            ...
        
        def transparency_set(self, x: int, y: int, boolean: bool) -> None:
            ...
        


class BitmapImage(Image):
    def __init__(self, name: Optional[Any] = ..., cnf: Dict[str, Any] = ..., master: Optional[Union[Misc, _tkinter.TkappType]] = ..., *, background: _Color = ..., data: Union[str, bytes] = ..., file: AnyPath = ..., foreground: _Color = ..., maskdata: str = ..., maskfile: AnyPath = ...) -> None:
        ...
    


def image_names() -> Tuple[str, ...]:
    ...

def image_types() -> Tuple[str, ...]:
    ...

class Spinbox(Widget, XView):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., buttonbackground: _Color = ..., buttoncursor: _Cursor = ..., buttondownrelief: _Relief = ..., buttonuprelief: _Relief = ..., command: Union[Callable[[], Any], str, _TkinterSequence[str]] = ..., cursor: _Cursor = ..., disabledbackground: _Color = ..., disabledforeground: _Color = ..., exportselection: bool = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., format: str = ..., from_: float = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., increment: float = ..., insertbackground: _Color = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., invalidcommand: _EntryValidateCommand = ..., invcmd: _EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., readonlybackground: _Color = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., state: Literal["normal", "disabled", "readonly"] = ..., takefocus: _TakeFocusValue = ..., textvariable: Variable = ..., to: float = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: _EntryValidateCommand = ..., vcmd: _EntryValidateCommand = ..., values: _TkinterSequence[str] = ..., width: int = ..., wrap: bool = ..., xscrollcommand: _XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, activebackground: _Color = ..., background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., buttonbackground: _Color = ..., buttoncursor: _Cursor = ..., buttondownrelief: _Relief = ..., buttonuprelief: _Relief = ..., command: Union[Callable[[], Any], str, _TkinterSequence[str]] = ..., cursor: _Cursor = ..., disabledbackground: _Color = ..., disabledforeground: _Color = ..., exportselection: bool = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., format: str = ..., from_: float = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., increment: float = ..., insertbackground: _Color = ..., insertborderwidth: _ScreenUnits = ..., insertofftime: int = ..., insertontime: int = ..., insertwidth: _ScreenUnits = ..., invalidcommand: _EntryValidateCommand = ..., invcmd: _EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., readonlybackground: _Color = ..., relief: _Relief = ..., repeatdelay: int = ..., repeatinterval: int = ..., selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ..., selectforeground: _Color = ..., state: Literal["normal", "disabled", "readonly"] = ..., takefocus: _TakeFocusValue = ..., textvariable: Variable = ..., to: float = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: _EntryValidateCommand = ..., vcmd: _EntryValidateCommand = ..., values: _TkinterSequence[str] = ..., width: int = ..., wrap: bool = ..., xscrollcommand: _XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def bbox(self, index):
        ...
    
    def delete(self, first, last: Optional[Any] = ...):
        ...
    
    def get(self):
        ...
    
    def icursor(self, index):
        ...
    
    def identify(self, x, y):
        ...
    
    def index(self, index):
        ...
    
    def insert(self, index, s):
        ...
    
    def invoke(self, element):
        ...
    
    def scan(self, *args):
        ...
    
    def scan_mark(self, x):
        ...
    
    def scan_dragto(self, x):
        ...
    
    def selection(self, *args: Any) -> Tuple[int, ...]:
        ...
    
    def selection_adjust(self, index):
        ...
    
    def selection_clear(self):
        ...
    
    def selection_element(self, element: Optional[Any] = ...):
        ...
    
    if sys.version_info >= (3, 8):
        def selection_from(self, index: int) -> None:
            ...
        
        def selection_present(self) -> None:
            ...
        
        def selection_range(self, start: int, end: int) -> None:
            ...
        
        def selection_to(self, index: int) -> None:
            ...
        


class LabelFrame(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., class_: str = ..., colormap: Union[Literal["new", ""], Misc] = ..., container: bool = ..., cursor: _Cursor = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., labelanchor: Literal["nw", "n", "ne", "en", "e", "es", "se", "s", "sw", "ws", "w", "wn"] = ..., labelwidget: Misc = ..., name: str = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., visual: Union[str, Tuple[str, int]] = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., fg: _Color = ..., font: _FontDescription = ..., foreground: _Color = ..., height: _ScreenUnits = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ..., highlightthickness: _ScreenUnits = ..., labelanchor: Literal["nw", "n", "ne", "en", "e", "es", "se", "s", "sw", "ws", "w", "wn"] = ..., labelwidget: Misc = ..., padx: _ScreenUnits = ..., pady: _ScreenUnits = ..., relief: _Relief = ..., takefocus: _TakeFocusValue = ..., text: Union[float, str] = ..., width: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class PanedWindow(Widget):
    def __init__(self, master: Optional[Misc] = ..., cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., handlepad: _ScreenUnits = ..., handlesize: _ScreenUnits = ..., height: _ScreenUnits = ..., name: str = ..., opaqueresize: bool = ..., orient: Literal["horizontal", "vertical"] = ..., proxybackground: _Color = ..., proxyborderwidth: _ScreenUnits = ..., proxyrelief: _Relief = ..., relief: _Relief = ..., sashcursor: _Cursor = ..., sashpad: _ScreenUnits = ..., sashrelief: _Relief = ..., sashwidth: _ScreenUnits = ..., showhandle: bool = ..., width: _ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ..., border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ..., handlepad: _ScreenUnits = ..., handlesize: _ScreenUnits = ..., height: _ScreenUnits = ..., opaqueresize: bool = ..., orient: Literal["horizontal", "vertical"] = ..., proxybackground: _Color = ..., proxyborderwidth: _ScreenUnits = ..., proxyrelief: _Relief = ..., relief: _Relief = ..., sashcursor: _Cursor = ..., sashpad: _ScreenUnits = ..., sashrelief: _Relief = ..., sashwidth: _ScreenUnits = ..., showhandle: bool = ..., width: _ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def add(self, child, **kw):
        ...
    
    def remove(self, child):
        ...
    
    forget: Any
    def identify(self, x, y):
        ...
    
    def proxy(self, *args):
        ...
    
    def proxy_coord(self):
        ...
    
    def proxy_forget(self):
        ...
    
    def proxy_place(self, x, y):
        ...
    
    def sash(self, *args):
        ...
    
    def sash_coord(self, index):
        ...
    
    def sash_mark(self, index):
        ...
    
    def sash_place(self, index, x, y):
        ...
    
    def panecget(self, child, option):
        ...
    
    def paneconfigure(self, tagOrId, cnf: Optional[Any] = ..., **kw):
        ...
    
    paneconfig: Any
    def panes(self):
        ...
    


