from . import base_events, transports
from _typeshed import Incomplete

class BaseSelectorEventLoop(base_events.BaseEventLoop):
    def __init__(self, selector: Incomplete | None = ...) -> None: ...
    def close(self) -> None: ...
    def add_reader(self, fd, callback, *args) -> None: ...
    def remove_reader(self, fd): ...
    def add_writer(self, fd, callback, *args) -> None: ...
    def remove_writer(self, fd): ...
    async def sock_recv(self, sock, n): ...
    async def sock_recv_into(self, sock, buf): ...
    async def sock_sendall(self, sock, data): ...
    async def sock_connect(self, sock, address): ...
    async def sock_accept(self, sock): ...

class _SelectorTransport(transports._FlowControlMixin, transports.Transport):
    max_size: Incomplete
    def __init__(self, loop, sock, protocol, extra: Incomplete | None = ..., server: Incomplete | None = ...) -> None: ...
    def abort(self) -> None: ...
    def set_protocol(self, protocol) -> None: ...
    def get_protocol(self): ...
    def is_closing(self): ...
    def close(self) -> None: ...
    def __del__(self, _warn=...) -> None: ...
    def get_write_buffer_size(self): ...

class _SelectorSocketTransport(_SelectorTransport):
    def __init__(self, loop, sock, protocol, waiter: Incomplete | None = ..., extra: Incomplete | None = ..., server: Incomplete | None = ...) -> None: ...
    def set_protocol(self, protocol) -> None: ...
    def is_reading(self): ...
    def pause_reading(self) -> None: ...
    def resume_reading(self) -> None: ...
    def write(self, data) -> None: ...
    def write_eof(self) -> None: ...
    def can_write_eof(self): ...

class _SelectorDatagramTransport(_SelectorTransport):
    def __init__(self, loop, sock, protocol, address: Incomplete | None = ..., waiter: Incomplete | None = ..., extra: Incomplete | None = ...) -> None: ...
    def get_write_buffer_size(self): ...
    def sendto(self, data, addr: Incomplete | None = ...) -> None: ...
