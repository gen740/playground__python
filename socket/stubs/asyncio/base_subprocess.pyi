from . import protocols as protocols, transports as transports
from .log import logger as logger
from _typeshed import Incomplete

class BaseSubprocessTransport(transports.SubprocessTransport):
    def __init__(self, loop, protocol, args, shell, stdin, stdout, stderr, bufsize, waiter: Incomplete | None = ..., extra: Incomplete | None = ..., **kwargs) -> None: ...
    def set_protocol(self, protocol) -> None: ...
    def get_protocol(self): ...
    def is_closing(self): ...
    def close(self) -> None: ...
    def __del__(self, _warn=...) -> None: ...
    def get_pid(self): ...
    def get_returncode(self): ...
    def get_pipe_transport(self, fd): ...
    def send_signal(self, signal) -> None: ...
    def terminate(self) -> None: ...
    def kill(self) -> None: ...

class WriteSubprocessPipeProto(protocols.BaseProtocol):
    proc: Incomplete
    fd: Incomplete
    pipe: Incomplete
    disconnected: bool
    def __init__(self, proc, fd) -> None: ...
    def connection_made(self, transport) -> None: ...
    def connection_lost(self, exc) -> None: ...
    def pause_writing(self) -> None: ...
    def resume_writing(self) -> None: ...

class ReadSubprocessPipeProto(WriteSubprocessPipeProto, protocols.Protocol):
    def data_received(self, data) -> None: ...
