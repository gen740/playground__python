"""
This type stub file was generated by pyright.
"""

import _tkinter
import sys
import tkinter
from tkinter.font import _FontDescription
from typing import Any, Callable, Dict, Optional, Tuple, Union, overload
from typing_extensions import Literal

def tclobjs_to_py(adict):
    ...

def setup_master(master: Optional[Any] = ...):
    ...

_TtkCompound = Literal["text", "image", tkinter._Compound]
class Style:
    master: Any
    tk: _tkinter.TkappType
    def __init__(self, master: Optional[Any] = ...) -> None:
        ...
    
    def configure(self, style, query_opt: Optional[Any] = ..., **kw):
        ...
    
    def map(self, style, query_opt: Optional[Any] = ..., **kw):
        ...
    
    def lookup(self, style, option, state: Optional[Any] = ..., default: Optional[Any] = ...):
        ...
    
    def layout(self, style, layoutspec: Optional[Any] = ...):
        ...
    
    def element_create(self, elementname, etype, *args, **kw):
        ...
    
    def element_names(self):
        ...
    
    def element_options(self, elementname):
        ...
    
    def theme_create(self, themename, parent: Optional[Any] = ..., settings: Optional[Any] = ...):
        ...
    
    def theme_settings(self, themename, settings):
        ...
    
    def theme_names(self):
        ...
    
    def theme_use(self, themename: Optional[Any] = ...):
        ...
    


class Widget(tkinter.Widget):
    def __init__(self, master: Optional[tkinter.Misc], widgetname, kw: Optional[Any] = ...) -> None:
        ...
    
    def identify(self, x, y):
        ...
    
    def instate(self, statespec, callback: Optional[Any] = ..., *args, **kw):
        ...
    
    def state(self, statespec: Optional[Any] = ...):
        ...
    


class Button(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., default: Literal["normal", "active", "disabled"] = ..., image: tkinter._ImageSpec = ..., name: str = ..., padding: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: Union[int, Literal[""]] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., default: Literal["normal", "active", "disabled"] = ..., image: tkinter._ImageSpec = ..., padding: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: Union[int, Literal[""]] = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def invoke(self):
        ...
    


class Checkbutton(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., image: tkinter._ImageSpec = ..., name: str = ..., offvalue: Any = ..., onvalue: Any = ..., padding: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., variable: tkinter.Variable = ..., width: Union[int, Literal[""]] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., image: tkinter._ImageSpec = ..., offvalue: Any = ..., onvalue: Any = ..., padding: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., variable: tkinter.Variable = ..., width: Union[int, Literal[""]] = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def invoke(self):
        ...
    


class Entry(Widget, tkinter.Entry):
    def __init__(self, master: Optional[tkinter.Misc] = ..., widget: Optional[str] = ..., *, background: tkinter._Color = ..., class_: str = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., show: str = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: tkinter._Color = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., show: str = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: Optional[Dict[str, Any]] = ..., *, background: tkinter._Color = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., show: str = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def config(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    def bbox(self, index):
        ...
    
    def identify(self, x, y):
        ...
    
    def validate(self):
        ...
    


class Combobox(Entry):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, background: tkinter._Color = ..., class_: str = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., height: int = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., postcommand: Union[Callable[[], Any], str] = ..., show: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: tkinter._TkinterSequence[str] = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: tkinter._Color = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., height: int = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., postcommand: Union[Callable[[], Any], str] = ..., show: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: tkinter._TkinterSequence[str] = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: Optional[Dict[str, Any]] = ..., *, background: tkinter._Color = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., height: int = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., postcommand: Union[Callable[[], Any], str] = ..., show: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: tkinter._TkinterSequence[str] = ..., width: int = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def config(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    def current(self, newindex: Optional[Any] = ...):
        ...
    
    def set(self, value):
        ...
    


class Frame(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., class_: str = ..., cursor: tkinter._Cursor = ..., height: tkinter._ScreenUnits = ..., name: str = ..., padding: tkinter._Padding = ..., relief: tkinter._Relief = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: tkinter._ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., cursor: tkinter._Cursor = ..., height: tkinter._ScreenUnits = ..., padding: tkinter._Padding = ..., relief: tkinter._Relief = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: tkinter._ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Label(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, anchor: tkinter._Anchor = ..., background: tkinter._Color = ..., border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., class_: str = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., image: tkinter._ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., padding: tkinter._Padding = ..., relief: tkinter._Relief = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: Union[int, Literal[""]] = ..., wraplength: tkinter._ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, anchor: tkinter._Anchor = ..., background: tkinter._Color = ..., border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., image: tkinter._ImageSpec = ..., justify: Literal["left", "center", "right"] = ..., padding: tkinter._Padding = ..., relief: tkinter._Relief = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: Union[int, Literal[""]] = ..., wraplength: tkinter._ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Labelframe(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., class_: str = ..., cursor: tkinter._Cursor = ..., height: tkinter._ScreenUnits = ..., labelanchor: Literal["nw", "n", "ne", "en", "e", "es", "se", "s", "sw", "ws", "w", "wn"] = ..., labelwidget: tkinter.Misc = ..., name: str = ..., padding: tkinter._Padding = ..., relief: tkinter._Relief = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., underline: int = ..., width: tkinter._ScreenUnits = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, border: tkinter._ScreenUnits = ..., borderwidth: tkinter._ScreenUnits = ..., cursor: tkinter._Cursor = ..., height: tkinter._ScreenUnits = ..., labelanchor: Literal["nw", "n", "ne", "en", "e", "es", "se", "s", "sw", "ws", "w", "wn"] = ..., labelwidget: tkinter.Misc = ..., padding: tkinter._Padding = ..., relief: tkinter._Relief = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., underline: int = ..., width: tkinter._ScreenUnits = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


LabelFrame = Labelframe
class Menubutton(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., direction: Literal["above", "below", "left", "right", "flush"] = ..., image: tkinter._ImageSpec = ..., menu: tkinter.Menu = ..., name: str = ..., padding: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: Union[int, Literal[""]] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., direction: Literal["above", "below", "left", "right", "flush"] = ..., image: tkinter._ImageSpec = ..., menu: tkinter.Menu = ..., padding: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., width: Union[int, Literal[""]] = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Notebook(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., height: int = ..., name: str = ..., padding: tkinter._Padding = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, cursor: tkinter._Cursor = ..., height: int = ..., padding: tkinter._Padding = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def add(self, child, **kw):
        ...
    
    def forget(self, tab_id):
        ...
    
    def hide(self, tab_id):
        ...
    
    def identify(self, x, y):
        ...
    
    def index(self, tab_id):
        ...
    
    def insert(self, pos, child, **kw):
        ...
    
    def select(self, tab_id: Optional[Any] = ...):
        ...
    
    def tab(self, tab_id, option: Optional[Any] = ..., **kw):
        ...
    
    def tabs(self):
        ...
    
    def enable_traversal(self):
        ...
    


class Panedwindow(Widget, tkinter.PanedWindow):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., height: int = ..., name: str = ..., orient: Literal["vertical", "horizontal"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, cursor: tkinter._Cursor = ..., height: int = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: Optional[Dict[str, Any]] = ..., *, cursor: tkinter._Cursor = ..., height: int = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., width: int = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def config(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    forget: Any
    def insert(self, pos, child, **kw):
        ...
    
    def pane(self, pane, option: Optional[Any] = ..., **kw):
        ...
    
    def sashpos(self, index, newpos: Optional[Any] = ...):
        ...
    


PanedWindow = Panedwindow
class Progressbar(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., length: tkinter._ScreenUnits = ..., maximum: float = ..., mode: Literal["determinate", "indeterminate"] = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., phase: int = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., value: float = ..., variable: Union[tkinter.IntVar, tkinter.DoubleVar] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, cursor: tkinter._Cursor = ..., length: tkinter._ScreenUnits = ..., maximum: float = ..., mode: Literal["determinate", "indeterminate"] = ..., orient: Literal["horizontal", "vertical"] = ..., phase: int = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., value: float = ..., variable: Union[tkinter.IntVar, tkinter.DoubleVar] = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def start(self, interval: Optional[Any] = ...):
        ...
    
    def step(self, amount: Optional[Any] = ...):
        ...
    
    def stop(self):
        ...
    


class Radiobutton(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., image: tkinter._ImageSpec = ..., name: str = ..., padding: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., value: Any = ..., variable: Union[tkinter.Variable, Literal[""]] = ..., width: Union[int, Literal[""]] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, command: tkinter._ButtonCommand = ..., compound: _TtkCompound = ..., cursor: tkinter._Cursor = ..., image: tkinter._ImageSpec = ..., padding: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., text: Union[float, str] = ..., textvariable: tkinter.Variable = ..., underline: int = ..., value: Any = ..., variable: Union[tkinter.Variable, Literal[""]] = ..., width: Union[int, Literal[""]] = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def invoke(self):
        ...
    


class Scale(Widget, tkinter.Scale):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., command: Union[str, Callable[[str], Any]] = ..., cursor: tkinter._Cursor = ..., from_: float = ..., length: tkinter._ScreenUnits = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., to: float = ..., value: float = ..., variable: Union[tkinter.IntVar, tkinter.DoubleVar] = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, command: Union[str, Callable[[str], Any]] = ..., cursor: tkinter._Cursor = ..., from_: float = ..., length: tkinter._ScreenUnits = ..., orient: Literal["horizontal", "vertical"] = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., to: float = ..., value: float = ..., variable: Union[tkinter.IntVar, tkinter.DoubleVar] = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: Optional[Dict[str, Any]] = ..., *, command: Union[str, Callable[[str], Any]] = ..., cursor: tkinter._Cursor = ..., from_: float = ..., length: tkinter._ScreenUnits = ..., orient: Literal["horizontal", "vertical"] = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., to: float = ..., value: float = ..., variable: Union[tkinter.IntVar, tkinter.DoubleVar] = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def config(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    def get(self, x: Optional[Any] = ..., y: Optional[Any] = ...):
        ...
    


class Scrollbar(Widget, tkinter.Scrollbar):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., command: Union[Callable[..., Optional[Tuple[float, float]]], str] = ..., cursor: tkinter._Cursor = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, command: Union[Callable[..., Optional[Tuple[float, float]]], str] = ..., cursor: tkinter._Cursor = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    @overload
    def config(self, cnf: Optional[Dict[str, Any]] = ..., *, command: Union[Callable[..., Optional[Tuple[float, float]]], str] = ..., cursor: tkinter._Cursor = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def config(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    


class Separator(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., name: str = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, cursor: tkinter._Cursor = ..., orient: Literal["horizontal", "vertical"] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


class Sizegrip(Widget):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., cursor: tkinter._Cursor = ..., name: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, cursor: tkinter._Cursor = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...


if sys.version_info >= (3, 7):
    class Spinbox(Entry):
        def __init__(self, master: Optional[tkinter.Misc] = ..., *, background: tkinter._Color = ..., class_: str = ..., command: Union[Callable[[], Any], str, tkinter._TkinterSequence[str]] = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., format: str = ..., from_: float = ..., increment: float = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., name: str = ..., show: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., to: float = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: tkinter._TkinterSequence[str] = ..., width: int = ..., wrap: bool = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> None:
            ...
        
        @overload
        def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, background: tkinter._Color = ..., command: Union[Callable[[], Any], str, tkinter._TkinterSequence[str]] = ..., cursor: tkinter._Cursor = ..., exportselection: bool = ..., font: _FontDescription = ..., foreground: tkinter._Color = ..., format: str = ..., from_: float = ..., increment: float = ..., invalidcommand: tkinter._EntryValidateCommand = ..., justify: Literal["left", "center", "right"] = ..., show: Any = ..., state: str = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., textvariable: tkinter.Variable = ..., to: float = ..., validate: Literal["none", "focus", "focusin", "focusout", "key", "all"] = ..., validatecommand: tkinter._EntryValidateCommand = ..., values: tkinter._TkinterSequence[str] = ..., width: int = ..., wrap: bool = ..., xscrollcommand: tkinter._XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
            ...
        
        @overload
        def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
            ...
        
        config = ...
        def set(self, value: Any) -> None:
            ...
        
    
    
class Treeview(Widget, tkinter.XView, tkinter.YView):
    def __init__(self, master: Optional[tkinter.Misc] = ..., *, class_: str = ..., columns: Union[str, tkinter._TkinterSequence[str]] = ..., cursor: tkinter._Cursor = ..., displaycolumns: Union[str, tkinter._TkinterSequence[str], tkinter._TkinterSequence[int], Literal["#all"]] = ..., height: int = ..., name: str = ..., padding: tkinter._Padding = ..., selectmode: Literal["extended", "browse", "none"] = ..., show: Union[Literal["tree", "headings", "tree headings"], tkinter._TkinterSequence[str]] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., xscrollcommand: tkinter._XYScrollCommand = ..., yscrollcommand: tkinter._XYScrollCommand = ...) -> None:
        ...
    
    @overload
    def configure(self, cnf: Optional[Dict[str, Any]] = ..., *, columns: Union[str, tkinter._TkinterSequence[str]] = ..., cursor: tkinter._Cursor = ..., displaycolumns: Union[str, tkinter._TkinterSequence[str], tkinter._TkinterSequence[int], Literal["#all"]] = ..., height: int = ..., padding: tkinter._Padding = ..., selectmode: Literal["extended", "browse", "none"] = ..., show: Union[Literal["tree", "headings", "tree headings"], tkinter._TkinterSequence[str]] = ..., style: str = ..., takefocus: tkinter._TakeFocusValue = ..., xscrollcommand: tkinter._XYScrollCommand = ..., yscrollcommand: tkinter._XYScrollCommand = ...) -> Optional[Dict[str, Tuple[str, str, str, Any, Any]]]:
        ...
    
    @overload
    def configure(self, cnf: str) -> Tuple[str, str, str, Any, Any]:
        ...
    
    config = ...
    def bbox(self, item, column: Optional[Any] = ...):
        ...
    
    def get_children(self, item: Optional[Any] = ...):
        ...
    
    def set_children(self, item, *newchildren):
        ...
    
    def column(self, column, option: Optional[Any] = ..., **kw):
        ...
    
    def delete(self, *items):
        ...
    
    def detach(self, *items):
        ...
    
    def exists(self, item):
        ...
    
    def focus(self, item: Optional[Any] = ...):
        ...
    
    def heading(self, column, option: Optional[Any] = ..., **kw):
        ...
    
    def identify(self, component, x, y):
        ...
    
    def identify_row(self, y):
        ...
    
    def identify_column(self, x):
        ...
    
    def identify_region(self, x, y):
        ...
    
    def identify_element(self, x, y):
        ...
    
    def index(self, item):
        ...
    
    def insert(self, parent, index, iid: Optional[Any] = ..., **kw):
        ...
    
    def item(self, item, option: Optional[Any] = ..., **kw):
        ...
    
    def move(self, item, parent, index):
        ...
    
    reattach: Any
    def next(self, item):
        ...
    
    def parent(self, item):
        ...
    
    def prev(self, item):
        ...
    
    def see(self, item):
        ...
    
    if sys.version_info >= (3, 8):
        def selection(self) -> Tuple[str, ...]:
            ...
        
    else:
        ...
    def selection_set(self, items):
        ...
    
    def selection_add(self, items):
        ...
    
    def selection_remove(self, items):
        ...
    
    def selection_toggle(self, items):
        ...
    
    def set(self, item, column: Optional[Any] = ..., value: Optional[Any] = ...):
        ...
    
    @overload
    def tag_bind(self, tagname: str, sequence: Optional[str] = ..., callback: Optional[Callable[[tkinter.Event[Treeview]], Any]] = ...) -> str:
        ...
    
    @overload
    def tag_bind(self, tagname: str, sequence: Optional[str], callback: str) -> None:
        ...
    
    @overload
    def tag_bind(self, tagname: str, *, callback: str) -> None:
        ...
    
    def tag_configure(self, tagname, option: Optional[Any] = ..., **kw):
        ...
    
    def tag_has(self, tagname, item: Optional[Any] = ...):
        ...
    


class LabeledScale(Frame):
    label: Any
    scale: Any
    def __init__(self, master: Optional[tkinter.Misc] = ..., variable: Optional[Union[tkinter.IntVar, tkinter.DoubleVar]] = ..., from_: float = ..., to: float = ..., *, compound: Union[Literal["top"], Literal["bottom"]] = ..., **kw: Any) -> None:
        ...
    
    value: Any


class OptionMenu(Menubutton):
    def __init__(self, master, variable, default: Optional[str] = ..., *values: str, style: str = ..., direction: Union[Literal["above"], Literal["below"], Literal["left"], Literal["right"], Literal["flush"]] = ..., command: Optional[Callable[[tkinter.StringVar], Any]] = ...) -> None:
        ...
    
    def set_menu(self, default: Optional[Any] = ..., *values):
        ...
    


