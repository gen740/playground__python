from . import protocols, streams
from _typeshed import Incomplete

class SubprocessStreamProtocol(streams.FlowControlMixin, protocols.SubprocessProtocol):
    stdin: Incomplete
    def __init__(self, limit, loop) -> None: ...
    stdout: Incomplete
    stderr: Incomplete
    def connection_made(self, transport) -> None: ...
    def pipe_data_received(self, fd, data) -> None: ...
    def pipe_connection_lost(self, fd, exc) -> None: ...
    def process_exited(self) -> None: ...

class Process:
    stdin: Incomplete
    stdout: Incomplete
    stderr: Incomplete
    pid: Incomplete
    def __init__(self, transport, protocol, loop) -> None: ...
    @property
    def returncode(self): ...
    async def wait(self): ...
    def send_signal(self, signal) -> None: ...
    def terminate(self) -> None: ...
    def kill(self) -> None: ...
    async def communicate(self, input: Incomplete | None = ...): ...

async def create_subprocess_shell(cmd, stdin: Incomplete | None = ..., stdout: Incomplete | None = ..., stderr: Incomplete | None = ..., loop: Incomplete | None = ..., limit=..., **kwds): ...
async def create_subprocess_exec(program, *args, stdin: Incomplete | None = ..., stdout: Incomplete | None = ..., stderr: Incomplete | None = ..., loop: Incomplete | None = ..., limit=..., **kwds): ...
