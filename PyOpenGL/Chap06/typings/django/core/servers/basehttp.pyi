"""
This type stub file was generated by pyright.
"""

import socketserver
from wsgiref import simple_server

"""
HTTP server that implements the Python WSGI protocol (PEP 333, rev 1.21).

Based on wsgiref.simple_server which is part of the standard library since 2.5.

This is a simple server for use in testing or debugging Django apps. It hasn't
been reviewed for security issues. DON'T USE IT FOR PRODUCTION USE!
"""
logger = ...
def get_internal_wsgi_application():
    """
    Load and return the WSGI application as configured by the user in
    ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,
    this will be the ``application`` object in ``projectname/wsgi.py``.

    This function, and the ``WSGI_APPLICATION`` setting itself, are only useful
    for Django's internal server (runserver); external WSGI servers should just
    be configured to point to the correct application object directly.

    If settings.WSGI_APPLICATION is not set (is ``None``), return
    whatever ``django.core.wsgi.get_wsgi_application`` returns.
    """
    ...

def is_broken_pipe_error():
    ...

class WSGIServer(simple_server.WSGIServer):
    """BaseHTTPServer that implements the Python WSGI protocol"""
    request_queue_size = ...
    def __init__(self, *args, ipv6=..., allow_reuse_address=..., **kwargs) -> None:
        ...
    
    def handle_error(self, request, client_address):
        ...
    


class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):
    """A threaded version of the WSGIServer"""
    daemon_threads = ...


class ServerHandler(simple_server.ServerHandler):
    http_version = ...
    def __init__(self, stdin, stdout, stderr, environ, **kwargs) -> None:
        """
        Use a LimitedStream so that unread request data will be ignored at
        the end of the request. WSGIRequest uses a LimitedStream but it
        shouldn't discard the data since the upstream servers usually do this.
        This fix applies only for testserver/runserver.
        """
        ...
    
    def cleanup_headers(self):
        ...
    
    def close(self):
        ...
    
    def handle_error(self):
        ...
    


class WSGIRequestHandler(simple_server.WSGIRequestHandler):
    protocol_version = ...
    def address_string(self):
        ...
    
    def log_message(self, format, *args):
        ...
    
    def get_environ(self):
        ...
    
    def handle(self):
        ...
    
    def handle_one_request(self):
        """Copy of WSGIRequestHandler.handle() but with different ServerHandler"""
        ...
    


def run(addr, port, wsgi_handler, ipv6=..., threading=..., server_cls=...):
    ...

