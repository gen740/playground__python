from .legacy.server import *
import http
from .connection import Connection, State
from .datastructures import Headers
from .extensions import Extension, ServerExtensionFactory
from .http11 import Request, Response
from .typing import LoggerLike, Origin, Subprotocol
from _typeshed import Incomplete
from typing import Generator, List, Optional, Sequence, Tuple

class ServerConnection(Connection):
    origins: Incomplete
    available_extensions: Incomplete
    available_subprotocols: Incomplete
    def __init__(self, origins: Optional[Sequence[Optional[Origin]]] = ..., extensions: Optional[Sequence[ServerExtensionFactory]] = ..., subprotocols: Optional[Sequence[Subprotocol]] = ..., state: State = ..., max_size: Optional[int] = ..., logger: Optional[LoggerLike] = ...) -> None: ...
    handshake_exc: Incomplete
    def accept(self, request: Request) -> Response: ...
    origin: Incomplete
    def process_request(self, request: Request) -> Tuple[str, Optional[str], Optional[str]]: ...
    def process_origin(self, headers: Headers) -> Optional[Origin]: ...
    def process_extensions(self, headers: Headers) -> Tuple[Optional[str], List[Extension]]: ...
    def process_subprotocol(self, headers: Headers) -> Optional[Subprotocol]: ...
    def select_subprotocol(self, client_subprotocols: Sequence[Subprotocol], server_subprotocols: Sequence[Subprotocol]) -> Optional[Subprotocol]: ...
    def reject(self, status: http.HTTPStatus, text: str) -> Response: ...
    state: Incomplete
    parser: Incomplete
    def send_response(self, response: Response) -> None: ...
    def parse(self) -> Generator[None, None, None]: ...
