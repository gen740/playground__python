from . import protocols
from _typeshed import Incomplete

async def open_connection(host: Incomplete | None = ..., port: Incomplete | None = ..., *, loop: Incomplete | None = ..., limit=..., **kwds): ...
async def start_server(client_connected_cb, host: Incomplete | None = ..., port: Incomplete | None = ..., *, loop: Incomplete | None = ..., limit=..., **kwds): ...
async def open_unix_connection(path: Incomplete | None = ..., *, loop: Incomplete | None = ..., limit=..., **kwds): ...
async def start_unix_server(client_connected_cb, path: Incomplete | None = ..., *, loop: Incomplete | None = ..., limit=..., **kwds): ...

class FlowControlMixin(protocols.Protocol):
    def __init__(self, loop: Incomplete | None = ...) -> None: ...
    def pause_writing(self) -> None: ...
    def resume_writing(self) -> None: ...
    def connection_lost(self, exc) -> None: ...

class StreamReaderProtocol(FlowControlMixin, protocols.Protocol):
    def __init__(self, stream_reader, client_connected_cb: Incomplete | None = ..., loop: Incomplete | None = ...) -> None: ...
    def connection_made(self, transport) -> None: ...
    def connection_lost(self, exc) -> None: ...
    def data_received(self, data) -> None: ...
    def eof_received(self): ...
    def __del__(self) -> None: ...

class StreamWriter:
    def __init__(self, transport, protocol, reader, loop) -> None: ...
    @property
    def transport(self): ...
    def write(self, data) -> None: ...
    def writelines(self, data) -> None: ...
    def write_eof(self): ...
    def can_write_eof(self): ...
    def close(self): ...
    def is_closing(self): ...
    async def wait_closed(self) -> None: ...
    def get_extra_info(self, name, default: Incomplete | None = ...): ...
    async def drain(self) -> None: ...

class StreamReader:
    def __init__(self, limit=..., loop: Incomplete | None = ...) -> None: ...
    def exception(self): ...
    def set_exception(self, exc) -> None: ...
    def set_transport(self, transport) -> None: ...
    def feed_eof(self) -> None: ...
    def at_eof(self): ...
    def feed_data(self, data) -> None: ...
    async def readline(self): ...
    async def readuntil(self, separator: bytes = ...): ...
    async def read(self, n: int = ...): ...
    async def readexactly(self, n): ...
    def __aiter__(self): ...
    async def __anext__(self): ...
