from . import events, protocols
from _typeshed import Incomplete

class _SendfileFallbackProtocol(protocols.Protocol):
    def __init__(self, transp) -> None: ...
    async def drain(self) -> None: ...
    def connection_made(self, transport) -> None: ...
    def connection_lost(self, exc) -> None: ...
    def pause_writing(self) -> None: ...
    def resume_writing(self) -> None: ...
    def data_received(self, data) -> None: ...
    def eof_received(self) -> None: ...
    async def restore(self) -> None: ...

class Server(events.AbstractServer):
    def __init__(self, loop, sockets, protocol_factory, ssl_context, backlog, ssl_handshake_timeout) -> None: ...
    def get_loop(self): ...
    def is_serving(self): ...
    @property
    def sockets(self): ...
    def close(self) -> None: ...
    async def start_serving(self) -> None: ...
    async def serve_forever(self) -> None: ...
    async def wait_closed(self) -> None: ...

class BaseEventLoop(events.AbstractEventLoop):
    slow_callback_duration: float
    def __init__(self) -> None: ...
    def create_future(self): ...
    def create_task(self, coro, *, name: Incomplete | None = ...): ...
    def set_task_factory(self, factory) -> None: ...
    def get_task_factory(self): ...
    async def shutdown_asyncgens(self) -> None: ...
    async def shutdown_default_executor(self) -> None: ...
    def run_forever(self) -> None: ...
    def run_until_complete(self, future): ...
    def stop(self) -> None: ...
    def close(self) -> None: ...
    def is_closed(self): ...
    def __del__(self, _warn=...) -> None: ...
    def is_running(self): ...
    def time(self): ...
    def call_later(self, delay, callback, *args, context: Incomplete | None = ...): ...
    def call_at(self, when, callback, *args, context: Incomplete | None = ...): ...
    def call_soon(self, callback, *args, context: Incomplete | None = ...): ...
    def call_soon_threadsafe(self, callback, *args, context: Incomplete | None = ...): ...
    def run_in_executor(self, executor, func, *args): ...
    def set_default_executor(self, executor) -> None: ...
    async def getaddrinfo(self, host, port, *, family: int = ..., type: int = ..., proto: int = ..., flags: int = ...): ...
    async def getnameinfo(self, sockaddr, flags: int = ...): ...
    async def sock_sendfile(self, sock, file, offset: int = ..., count: Incomplete | None = ..., *, fallback: bool = ...): ...
    async def create_connection(self, protocol_factory, host: Incomplete | None = ..., port: Incomplete | None = ..., *, ssl: Incomplete | None = ..., family: int = ..., proto: int = ..., flags: int = ..., sock: Incomplete | None = ..., local_addr: Incomplete | None = ..., server_hostname: Incomplete | None = ..., ssl_handshake_timeout: Incomplete | None = ..., happy_eyeballs_delay: Incomplete | None = ..., interleave: Incomplete | None = ...): ...
    async def sendfile(self, transport, file, offset: int = ..., count: Incomplete | None = ..., *, fallback: bool = ...): ...
    async def start_tls(self, transport, protocol, sslcontext, *, server_side: bool = ..., server_hostname: Incomplete | None = ..., ssl_handshake_timeout: Incomplete | None = ...): ...
    async def create_datagram_endpoint(self, protocol_factory, local_addr: Incomplete | None = ..., remote_addr: Incomplete | None = ..., *, family: int = ..., proto: int = ..., flags: int = ..., reuse_address=..., reuse_port: Incomplete | None = ..., allow_broadcast: Incomplete | None = ..., sock: Incomplete | None = ...): ...
    async def create_server(self, protocol_factory, host: Incomplete | None = ..., port: Incomplete | None = ..., *, family=..., flags=..., sock: Incomplete | None = ..., backlog: int = ..., ssl: Incomplete | None = ..., reuse_address: Incomplete | None = ..., reuse_port: Incomplete | None = ..., ssl_handshake_timeout: Incomplete | None = ..., start_serving: bool = ...): ...
    async def connect_accepted_socket(self, protocol_factory, sock, *, ssl: Incomplete | None = ..., ssl_handshake_timeout: Incomplete | None = ...): ...
    async def connect_read_pipe(self, protocol_factory, pipe): ...
    async def connect_write_pipe(self, protocol_factory, pipe): ...
    async def subprocess_shell(self, protocol_factory, cmd, *, stdin=..., stdout=..., stderr=..., universal_newlines: bool = ..., shell: bool = ..., bufsize: int = ..., encoding: Incomplete | None = ..., errors: Incomplete | None = ..., text: Incomplete | None = ..., **kwargs): ...
    async def subprocess_exec(self, protocol_factory, program, *args, stdin=..., stdout=..., stderr=..., universal_newlines: bool = ..., shell: bool = ..., bufsize: int = ..., encoding: Incomplete | None = ..., errors: Incomplete | None = ..., text: Incomplete | None = ..., **kwargs): ...
    def get_exception_handler(self): ...
    def set_exception_handler(self, handler) -> None: ...
    def default_exception_handler(self, context) -> None: ...
    def call_exception_handler(self, context) -> None: ...
    def get_debug(self): ...
    def set_debug(self, enabled) -> None: ...
