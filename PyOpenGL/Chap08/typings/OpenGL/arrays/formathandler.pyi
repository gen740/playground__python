"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
class FormatHandler(object):
    """Abstract class describing the handler interface
    
    Each data-type handler is responsible for providing a number of methods
    which allow it to manipulate (and create) instances of the data-type 
    it represents.
    """
    LAZY_TYPE_REGISTRY = ...
    HANDLER_REGISTRY = ...
    baseType = ...
    typeConstant = ...
    HANDLED_TYPES = ...
    preferredOutput = ...
    isOutput = ...
    GENERIC_OUTPUT_PREFERENCES = ...
    ALL_OUTPUT_HANDLERS = ...
    def loadAll(cls):
        """Load all OpenGL.plugins-registered FormatHandler classes
        """
        ...
    
    @classmethod
    def loadPlugin(cls, entrypoint):
        """Load a single entry-point via plugins module"""
        ...
    
    @classmethod
    def typeLookup(cls, type):
        """Lookup handler by data-type"""
        ...
    
    loadAll = ...
    def register(self, types=...):
        """Register this class as handler for given set of types"""
        ...
    
    def registerReturn(self):
        """Register this handler as the default return-type handler"""
        ...
    
    def from_param(self, value, typeCode=...):
        """Convert to a ctypes pointer value"""
        ...
    
    def dataPointer(self, value):
        """return long for pointer value"""
        ...
    
    def asArray(self, value, typeCode=...):
        """Given a value, convert to array representation"""
        ...
    
    def arrayToGLType(self, value):
        """Given a value, guess OpenGL type of the corresponding pointer"""
        ...
    
    def arraySize(self, value, typeCode=...):
        """Given a data-value, calculate dimensions for the array"""
        ...
    
    def unitSize(self, value, typeCode=...):
        """Determine unit size of an array (if possible)"""
        ...
    
    def dimensions(self, value, typeCode=...):
        """Determine dimensions of the passed array value (if possible)"""
        ...
    


