from collections.abc import Generator
from typing import Any
from urwid.compat import bytes as bytes
from urwid.text_layout import LayoutSegment as LayoutSegment, trim_line as trim_line
from urwid.util import apply_target_encoding as apply_target_encoding, calc_text_pos as calc_text_pos, calc_width as calc_width, rle_append_modify as rle_append_modify, rle_join_modify as rle_join_modify, rle_len as rle_len, rle_product as rle_product, trim_text_attr_cs as trim_text_attr_cs

class CanvasCache:
    hits: int
    fetches: int
    cleanups: int
    def store(cls, wcls, canvas): ...
    store: Any
    def fetch(cls, widget, wcls, size, focus): ...
    fetch: Any
    def invalidate(cls, widget) -> None: ...
    invalidate: Any
    def cleanup(cls, ref) -> None: ...
    cleanup: Any
    def clear(cls) -> None: ...
    clear: Any

class CanvasError(Exception): ...

class Canvas:
    cacheable: bool
    coords: Any
    shortcuts: Any
    def __init__(self, value1: Any | None = ..., value2: Any | None = ..., value3: Any | None = ...) -> None: ...
    def finalize(self, widget, size, focus) -> None: ...
    widget_info: Any
    text: Any
    attr: Any
    cs: Any
    def content(self, trim_left: int = ..., trim_top: int = ..., cols: Any | None = ..., rows: Any | None = ..., attr: Any | None = ...) -> None: ...
    def cols(self) -> None: ...
    def rows(self) -> None: ...
    def content_delta(self) -> None: ...
    def get_cursor(self): ...
    def set_cursor(self, c) -> None: ...
    cursor: Any
    def get_pop_up(self): ...
    def set_pop_up(self, w, left, top, overlay_width, overlay_height) -> None: ...
    def translate_coords(self, dx, dy): ...

class TextCanvas(Canvas):
    cursor: Any
    def __init__(self, text: Any | None = ..., attr: Any | None = ..., cs: Any | None = ..., cursor: Any | None = ..., maxcol: Any | None = ..., check_width: bool = ...) -> None: ...
    def rows(self): ...
    def cols(self): ...
    def translated_coords(self, dx, dy): ...
    def content(self, trim_left: int = ..., trim_top: int = ..., cols: Any | None = ..., rows: Any | None = ..., attr_map: Any | None = ...) -> Generator[Any, None, None]: ...
    def content_delta(self, other): ...

class BlankCanvas(Canvas):
    def __init__(self) -> None: ...
    def content(self, trim_left, trim_top, cols, rows, attr) -> Generator[Any, None, None]: ...
    def cols(self) -> None: ...
    def rows(self) -> None: ...
    def content_delta(self) -> None: ...

blank_canvas: Any

class SolidCanvas(Canvas):
    size: Any
    cursor: Any
    def __init__(self, fill_char, cols, rows) -> None: ...
    def cols(self): ...
    def rows(self): ...
    def content(self, trim_left: int = ..., trim_top: int = ..., cols: Any | None = ..., rows: Any | None = ..., attr: Any | None = ...) -> Generator[Any, None, None]: ...
    def content_delta(self, other): ...

class CompositeCanvas(Canvas):
    shards: Any
    children: Any
    def __init__(self, canv: Any | None = ...) -> None: ...
    def rows(self): ...
    def cols(self): ...
    def content(self) -> Generator[Any, None, None]: ...
    def content_delta(self, other) -> Generator[Any, None, None]: ...
    coords: Any
    def trim(self, top, count: Any | None = ...) -> None: ...
    def trim_end(self, end) -> None: ...
    def pad_trim_left_right(self, left, right) -> None: ...
    def pad_trim_top_bottom(self, top, bottom) -> None: ...
    def overlay(self, other, left, top) -> None: ...
    def fill_attr(self, a) -> None: ...
    def fill_attr_apply(self, mapping) -> None: ...
    depends_on: Any
    def set_depends(self, widget_list) -> None: ...

def shard_body_row(sbody): ...
def shard_body_tail(num_rows, sbody): ...
def shards_delta(shards, other_shards) -> Generator[Any, None, None]: ...
def shard_cviews_delta(cviews, other_cviews) -> Generator[Any, None, None]: ...
def shard_body(cviews, shard_tail, create_iter: bool = ..., iter_default: Any | None = ...): ...
def shards_trim_top(shards, top): ...
def shards_trim_rows(shards, keep_rows): ...
def shards_trim_sides(shards, left, cols): ...
def shards_join(shard_lists): ...
def cview_trim_rows(cv, rows): ...
def cview_trim_top(cv, trim): ...
def cview_trim_left(cv, trim): ...
def cview_trim_cols(cv, cols): ...
def CanvasCombine(l): ...
def CanvasOverlay(top_c, bottom_c, left, top): ...
def CanvasJoin(l): ...
def apply_text_layout(text, attr, ls, maxcol): ...
