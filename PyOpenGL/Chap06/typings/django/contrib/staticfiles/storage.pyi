"""
This type stub file was generated by pyright.
"""

from django.core.files.storage import FileSystemStorage
from django.utils.functional import LazyObject

class StaticFilesStorage(FileSystemStorage):
    """
    Standard file system storage for static files.

    The defaults for ``location`` and ``base_url`` are
    ``STATIC_ROOT`` and ``STATIC_URL``.
    """
    def __init__(self, location=..., base_url=..., *args, **kwargs) -> None:
        ...
    
    def path(self, name):
        ...
    


class HashedFilesMixin:
    default_template = ...
    max_post_process_passes = ...
    patterns = ...
    keep_intermediate_files = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def file_hash(self, name, content=...):
        """
        Return a hash of the file with the given name and optional content.
        """
        ...
    
    def hashed_name(self, name, content=..., filename=...):
        ...
    
    def url(self, name, force=...):
        """
        Return the non-hashed URL in DEBUG mode.
        """
        ...
    
    def url_converter(self, name, hashed_files, template=...):
        """
        Return the custom URL converter for the given file name.
        """
        ...
    
    def post_process(self, paths, dry_run=..., **options):
        """
        Post process the given dictionary of files (called from collectstatic).

        Processing is actually two separate operations:

        1. renaming files to include a hash of their content for cache-busting,
           and copying those files to the target storage.
        2. adjusting files which contain references to other files so they
           refer to the cache-busting filenames.

        If either of these are performed on a file, then that file is considered
        post-processed.
        """
        ...
    
    def clean_name(self, name):
        ...
    
    def hash_key(self, name):
        ...
    
    def stored_name(self, name):
        ...
    


class ManifestFilesMixin(HashedFilesMixin):
    manifest_version = ...
    manifest_name = ...
    manifest_strict = ...
    keep_intermediate_files = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def read_manifest(self):
        ...
    
    def load_manifest(self):
        ...
    
    def post_process(self, *args, **kwargs):
        ...
    
    def save_manifest(self):
        ...
    
    def stored_name(self, name):
        ...
    


class ManifestStaticFilesStorage(ManifestFilesMixin, StaticFilesStorage):
    """
    A static file system storage backend which also saves
    hashed copies of the files it saves.
    """
    ...


class ConfiguredStorage(LazyObject):
    ...


staticfiles_storage = ...
