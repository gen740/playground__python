"""
This type stub file was generated by pyright.
"""

from OpenGL import acceleratesupport

"""Late-bound base-class (with acceleration)"""
LateBind = ...
if acceleratesupport.ACCELERATE_AVAILABLE:
    ...
if LateBind is None:
    class LateBind(object):
        """Provides a __call__ which dispatches to self._finalCall

        When called without self._finalCall() makes a call to
        self.finalise() and then calls self._finalCall()
        """
        _finalCall = ...
        def setFinalCall(self, finalCall):
            """Set our finalCall to the callable object given"""
            ...
        
        def getFinalCall(self):
            """Retrieve and/or bind and retrieve final call"""
            ...
        
        def finalise(self):
            """Finalise our target to our final callable object

            return final callable
            """
            ...
        
        def __nonzero__(self):
            """Resolve our final call and check for empty/nonzero on it"""
            ...
        
        def __call__(self, *args, **named):
            """Call self._finalCall, calling finalise() first if not already called

            There's actually *no* reason to unpack and repack the arguments,
            but unfortunately I don't know of a Cython syntax to specify
            that.
            """
            ...
        
    
    
if Curry is None:
    class Curry(object):
        """Provides a simple Curry which can bind (only) the first element

        This is used by lazywrapper, which explains the weird naming
        of the two attributes...
        """
        wrapperFunction = ...
        baseFunction = ...
        def __init__(self, wrapperFunction, baseFunction) -> None:
            """Stores self.wrapperFunction and self.baseFunction"""
            ...
        
        def __call__(self, *args, **named):
            """returns self.wrapperFunction( self.baseFunction, *args, **named )"""
            ...
        
    
    
