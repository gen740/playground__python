from collections.abc import Generator
from typing import Any
from urwid.canvas import CanvasCombine as CanvasCombine, CanvasJoin as CanvasJoin, CanvasOverlay as CanvasOverlay, CompositeCanvas as CompositeCanvas, SolidCanvas as SolidCanvas
from urwid.compat import xrange as xrange
from urwid.decoration import Filler as Filler, Padding as Padding, calculate_left_right_padding as calculate_left_right_padding, calculate_top_bottom_filler as calculate_top_bottom_filler, normalize_align as normalize_align, normalize_height as normalize_height, normalize_valign as normalize_valign, normalize_width as normalize_width, simplify_align as simplify_align, simplify_height as simplify_height, simplify_valign as simplify_valign, simplify_width as simplify_width
from urwid.monitored_list import MonitoredFocusList as MonitoredFocusList, MonitoredList as MonitoredList
from urwid.util import is_mouse_press as is_mouse_press
from urwid.widget import BOTTOM as BOTTOM, BOX as BOX, CLIP as CLIP, Divider as Divider, FIXED as FIXED, FLOW as FLOW, GIVEN as GIVEN, LEFT as LEFT, PACK as PACK, RELATIVE as RELATIVE, RELATIVE_100 as RELATIVE_100, RIGHT as RIGHT, TOP as TOP, WEIGHT as WEIGHT, Widget as Widget, WidgetWrap as WidgetWrap

class WidgetContainerMixin:
    def __getitem__(self, position): ...
    def get_focus_path(self): ...
    def set_focus_path(self, positions) -> None: ...
    def get_focus_widgets(self): ...

class WidgetContainerListContentsMixin:
    def __iter__(self): ...
    def __reversed__(self): ...

class GridFlowError(Exception): ...

class GridFlow(WidgetWrap, WidgetContainerMixin, WidgetContainerListContentsMixin):
    def sizing(self): ...
    h_sep: Any
    v_sep: Any
    align: Any
    def __init__(self, cells, cell_width, h_sep, v_sep, align): ...
    cells: Any
    cell_width: Any
    contents: Any
    def options(self, width_type=..., width_amount: Any | None = ...): ...
    def set_focus(self, cell): ...
    def get_focus(self): ...
    focus: Any
    focus_cell: Any
    focus_position: Any
    def get_display_widget(self, size): ...
    def generate_display_widget(self, size): ...
    def keypress(self, size, key): ...
    def rows(self, size, focus: bool = ...): ...
    def render(self, size, focus: bool = ...): ...
    def get_cursor_coords(self, size): ...
    def move_cursor_to_coords(self, size, col, row): ...
    def mouse_event(self, size, event, button, col, row, focus): ...
    def get_pref_col(self, size): ...

class OverlayError(Exception): ...

class Overlay(Widget, WidgetContainerMixin, WidgetContainerListContentsMixin):
    top_w: Any
    bottom_w: Any
    def __init__(self, top_w, bottom_w, align, width, valign, height, min_width: Any | None = ..., min_height: Any | None = ..., left: int = ..., right: int = ..., top: int = ..., bottom: int = ...) -> None: ...
    @staticmethod
    def options(align_type, align_amount, width_type, width_amount, valign_type, valign_amount, height_type, height_amount, min_width: Any | None = ..., min_height: Any | None = ..., left: int = ..., right: int = ..., top: int = ..., bottom: int = ...): ...
    def set_overlay_parameters(self, align, width, valign, height, min_width: Any | None = ..., min_height: Any | None = ..., left: int = ..., right: int = ..., top: int = ..., bottom: int = ...) -> None: ...
    def selectable(self): ...
    def keypress(self, size, key): ...
    focus: Any
    focus_position: Any
    def _contents__getitem__(self, index): ...
    align_type: Any
    align_amount: Any
    width_type: Any
    width_amount: Any
    valign_type: Any
    valign_amount: Any
    height_type: Any
    height_amount: Any
    left: Any
    right: Any
    top: Any
    bottom: Any
    min_width: Any
    min_height: Any
    def _contents__setitem__(self, index, value) -> None: ...
    contents: Any
    def get_cursor_coords(self, size): ...
    def calculate_padding_filler(self, size, focus): ...
    def top_w_size(self, size, left, right, top, bottom): ...
    def render(self, size, focus: bool = ...): ...
    def mouse_event(self, size, event, button, col, row, focus): ...

class FrameError(Exception): ...

class Frame(Widget, WidgetContainerMixin):
    focus_part: Any
    def __init__(self, body, header: Any | None = ..., footer: Any | None = ..., focus_part: str = ...) -> None: ...
    def get_header(self): ...
    def set_header(self, header) -> None: ...
    header: Any
    def get_body(self): ...
    def set_body(self, body) -> None: ...
    body: Any
    def get_footer(self): ...
    def set_footer(self, footer) -> None: ...
    footer: Any
    def set_focus(self, part) -> None: ...
    def get_focus(self): ...
    focus: Any
    focus_position: Any
    def _contents__getitem__(self, key): ...
    def _contents__setitem__(self, key, value) -> None: ...
    def _contents__delitem__(self, key) -> None: ...
    contents: Any
    def options(self) -> None: ...
    def frame_top_bottom(self, size, focus): ...
    def render(self, size, focus: bool = ...): ...
    def keypress(self, size, key): ...
    def mouse_event(self, size, event, button, col, row, focus): ...
    def get_cursor_coords(self, size): ...
    def __iter__(self): ...
    def __reversed__(self) -> Generator[Any, None, None]: ...

class PileError(Exception): ...

class Pile(Widget, WidgetContainerMixin, WidgetContainerListContentsMixin):
    pref_col: int
    def __init__(self, widget_list, focus_item: Any | None = ...): ...
    widget_list: Any
    item_types: Any
    contents: Any
    @staticmethod
    def options(height_type=..., height_amount: int = ...): ...
    focus_position: Any
    def set_focus(self, item): ...
    def get_focus(self): ...
    focus: Any
    focus_item: Any
    def get_pref_col(self, size): ...
    def get_item_size(self, size, i, focus, item_rows: Any | None = ...): ...
    def get_item_rows(self, size, focus): ...
    def render(self, size, focus: bool = ...): ...
    def get_cursor_coords(self, size): ...
    def rows(self, size, focus: bool = ...): ...
    def keypress(self, size, key): ...
    def move_cursor_to_coords(self, size, col, row): ...
    def mouse_event(self, size, event, button, col, row, focus): ...

class ColumnsError(Exception): ...

class Columns(Widget, WidgetContainerMixin, WidgetContainerListContentsMixin):
    dividechars: Any
    focus_position: Any
    pref_col: Any
    min_width: Any
    def __init__(self, widget_list, dividechars: int = ..., focus_column: Any | None = ..., min_width: int = ..., box_columns: Any | None = ...): ...
    widget_list: Any
    column_types: Any
    box_columns: Any
    has_flow_type: Any
    contents: Any
    @staticmethod
    def options(width_type=..., width_amount: int = ..., box_widget: bool = ...): ...
    def set_focus_column(self, num) -> None: ...
    def get_focus_column(self): ...
    def set_focus(self, item): ...
    def get_focus(self): ...
    focus: Any
    focus_col: Any
    def column_widths(self, size, focus: bool = ...): ...
    def render(self, size, focus: bool = ...): ...
    def get_cursor_coords(self, size): ...
    def move_cursor_to_coords(self, size, col, row): ...
    def mouse_event(self, size, event, button, col, row, focus): ...
    def get_pref_col(self, size): ...
    def rows(self, size, focus: bool = ...): ...
    def keypress(self, size, key): ...
