from typing import Any
from urwid.canvas import CompositeCanvas as CompositeCanvas, SolidCanvas as SolidCanvas
from urwid.split_repr import remove_defaults as remove_defaults
from urwid.util import int_scale as int_scale
from urwid.widget import BOTTOM as BOTTOM, BOX as BOX, CENTER as CENTER, CLIP as CLIP, Divider as Divider, Edit as Edit, FLOW as FLOW, GIVEN as GIVEN, LEFT as LEFT, MIDDLE as MIDDLE, PACK as PACK, RELATIVE as RELATIVE, RELATIVE_100 as RELATIVE_100, RIGHT as RIGHT, SolidFill as SolidFill, TOP as TOP, Text as Text, Widget as Widget, WidgetError as WidgetError, delegate_to_widget_mixin as delegate_to_widget_mixin

class WidgetDecoration(Widget):
    def __init__(self, original_widget) -> None: ...
    original_widget: Any
    base_widget: Any
    def selectable(self): ...
    def sizing(self): ...

class WidgetPlaceholder(WidgetDecoration): ...
class AttrMapError(WidgetError): ...

class AttrMap(WidgetDecoration):
    def __init__(self, w, attr_map, focus_map: Any | None = ...) -> None: ...
    def get_attr_map(self): ...
    def set_attr_map(self, attr_map) -> None: ...
    attr_map: Any
    def get_focus_map(self): ...
    def set_focus_map(self, focus_map) -> None: ...
    focus_map: Any
    def render(self, size, focus: bool = ...): ...

class AttrWrap(AttrMap):
    def __init__(self, w, attr, focus_attr: Any | None = ...) -> None: ...
    get_w: Any
    set_w: Any
    w: Any
    def get_attr(self): ...
    def set_attr(self, attr) -> None: ...
    attr: Any
    def get_focus_attr(self): ...
    def set_focus_attr(self, focus_attr) -> None: ...
    focus_attr: Any
    def __getattr__(self, name): ...
    def sizing(self): ...

class BoxAdapterError(Exception): ...

class BoxAdapter(WidgetDecoration):
    no_cache: Any
    height: Any
    def __init__(self, box_widget, height) -> None: ...
    box_widget: Any
    def sizing(self): ...
    def rows(self, size, focus: bool = ...): ...
    def get_cursor_coords(self, size): ...
    def get_pref_col(self, size): ...
    def keypress(self, size, key): ...
    def move_cursor_to_coords(self, size, col, row): ...
    def mouse_event(self, size, event, button, col, row, focus): ...
    def render(self, size, focus: bool = ...): ...
    def __getattr__(self, name): ...

class PaddingError(Exception): ...

class Padding(WidgetDecoration):
    left: Any
    right: Any
    min_width: Any
    def __init__(self, w, align=..., width=..., min_width: Any | None = ..., left: int = ..., right: int = ...) -> None: ...
    def sizing(self): ...
    align: Any
    width: Any
    def render(self, size, focus: bool = ...): ...
    def padding_values(self, size, focus): ...
    def rows(self, size, focus: bool = ...): ...
    def keypress(self, size, key): ...
    def get_cursor_coords(self, size): ...
    def move_cursor_to_coords(self, size, x, y): ...
    def mouse_event(self, size, event, button, x, y, focus): ...
    def get_pref_col(self, size): ...

class FillerError(Exception): ...

class Filler(WidgetDecoration):
    top: Any
    bottom: Any
    min_height: Any
    def __init__(self, body, valign=..., height=..., min_height: Any | None = ..., top: int = ..., bottom: int = ...) -> None: ...
    def sizing(self): ...
    get_body: Any
    set_body: Any
    body: Any
    def selectable(self): ...
    def filler_values(self, size, focus): ...
    def render(self, size, focus: bool = ...): ...
    def keypress(self, size, key): ...
    def get_cursor_coords(self, size): ...
    def get_pref_col(self, size): ...
    def move_cursor_to_coords(self, size, col, row): ...
    def mouse_event(self, size, event, button, col, row, focus): ...

class WidgetDisable(WidgetDecoration):
    no_cache: Any
    ignore_focus: bool
    def selectable(self): ...
    def rows(self, size, focus: bool = ...): ...
    def sizing(self): ...
    def pack(self, size, focus: bool = ...): ...
    def render(self, size, focus: bool = ...): ...

def normalize_align(align, err): ...
def simplify_align(align_type, align_amount): ...
def normalize_width(width, err): ...
def simplify_width(width_type, width_amount): ...
def normalize_valign(valign, err): ...
def simplify_valign(valign_type, valign_amount): ...
def normalize_height(height, err): ...
def simplify_height(height_type, height_amount): ...
def calculate_top_bottom_filler(maxrow, valign_type, valign_amount, height_type, height_amount, min_height, top, bottom): ...
def calculate_left_right_padding(maxcol, align_type, align_amount, width_type, width_amount, min_width, left, right): ...
